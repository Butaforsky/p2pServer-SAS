<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [p2pServer-SAS\p2pServer-SAS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image p2pServer-SAS\p2pServer-SAS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Mon Nov  1 17:45:49 2021
<BR><P>
<H3>Maximum Stack Usage =        632 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
APPE_SysUserEvtRx &rArr; APP_BLE_Init &rArr; SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; P2PS_STM_Init &rArr; aci_gatt_add_service &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b3]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[53]">AES1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">AES1_IRQHandler</a><BR>
 <LI><a href="#[1a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">BusFault_Handler</a><BR>
 <LI><a href="#[18]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">HardFault_Handler</a><BR>
 <LI><a href="#[19]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">MemManage_Handler</a><BR>
 <LI><a href="#[17]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">NMI_Handler</a><BR>
 <LI><a href="#[1b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">UsageFault_Handler</a><BR>
 <LI><a href="#[2b4]">UART_EndTxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b4]">UART_EndTxTransfer</a><BR>
 <LI><a href="#[2b5]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b5]">UART_EndRxTransfer</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ADC1_IRQHandler</a> from stm32wbxx_it.o(.text.ADC1_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[6a]">ADC_DMAConvCplt</a> from stm32wbxx_hal_adc.o(.text.ADC_DMAConvCplt) referenced 2 times from stm32wbxx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[69]">ADC_DMAError</a> from stm32wbxx_hal_adc.o(.text.ADC_DMAError) referenced 2 times from stm32wbxx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[6b]">ADC_DMAHalfConvCplt</a> from stm32wbxx_hal_adc.o(.text.ADC_DMAHalfConvCplt) referenced 2 times from stm32wbxx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[53]">AES1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[54]">AES2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[78]">APPE_SysStatusNot</a> from app_entry.o(.text.APPE_SysStatusNot) referenced 2 times from app_entry.o(.text.appe_Tl_Init)
 <LI><a href="#[79]">APPE_SysUserEvtRx</a> from app_entry.o(.text.APPE_SysUserEvtRx) referenced 2 times from app_entry.o(.text.appe_Tl_Init)
 <LI><a href="#[64]">Adv_Cancel</a> from app_ble.o(.text.Adv_Cancel) referenced 2 times from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[65]">Adv_Cancel_Req</a> from app_ble.o(.text.Adv_Cancel_Req) referenced 2 times from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[67]">BLE_StatusNot</a> from app_ble.o(.text.BLE_StatusNot) referenced 2 times from app_ble.o(.text.Ble_Tl_Init)
 <LI><a href="#[68]">BLE_UserEvtRx</a> from app_ble.o(.text.BLE_UserEvtRx) referenced 2 times from app_ble.o(.text.Ble_Tl_Init)
 <LI><a href="#[1a]">BusFault_Handler</a> from stm32wbxx_it.o(.text.BusFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[35]">C2SEV_PWR_C2H_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[13]">CDC_Control_FS</a> from usbd_cdc_if.o(.text.CDC_Control_FS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[12]">CDC_DeInit_FS</a> from usbd_cdc_if.o(.text.CDC_DeInit_FS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[11]">CDC_Init_FS</a> from usbd_cdc_if.o(.text.CDC_Init_FS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[14]">CDC_Receive_FS</a> from usbd_cdc_if.o(.text.CDC_Receive_FS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[15]">CDC_TransmitCplt_FS</a> from usbd_cdc_if.o(.text.CDC_TransmitCplt_FS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[36]">COMP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4a]">CRS_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel1_IRQHandler</a> from stm32wbxx_it.o(.text.DMA1_Channel1_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel4_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[30]">DMA1_Channel6_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[31]">DMA1_Channel7_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[57]">DMA2_Channel1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[58]">DMA2_Channel2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[59]">DMA2_Channel3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel4_IRQHandler</a> from stm32wbxx_it.o(.text.DMA2_Channel4_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5b]">DMA2_Channel5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5c]">DMA2_Channel6_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel7_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5e]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1d]">DebugMon_Handler</a> from stm32wbxx_it.o(.text.DebugMon_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[26]">EXTI0_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[48]">EXTI15_10_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[27]">EXTI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[28]">EXTI2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[29]">EXTI3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2a]">EXTI4_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[37]">EXTI9_5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[24]">FLASH_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[56]">FPU_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[6f]">HAL_IPCC_RxCallback</a> from stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_RxCallback) referenced 2 times from stm32wbxx_hal_ipcc.o(.text.IPCC_SetDefaultCallbacks)
 <LI><a href="#[70]">HAL_IPCC_TxCallback</a> from stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_TxCallback) referenced 2 times from stm32wbxx_hal_ipcc.o(.text.IPCC_SetDefaultCallbacks)
 <LI><a href="#[4e]">HSEM_IRQHandler</a> from stm32wbxx_it.o(.text.HSEM_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[18]">HardFault_Handler</a> from stm32wbxx_it.o(.text.HardFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3f]">I2C1_ER_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3e]">I2C1_EV_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[41]">I2C3_ER_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[40]">I2C3_EV_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4c]">IPCC_C1_RX_IRQHandler</a> from stm32wbxx_it.o(.text.IPCC_C1_RX_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4d]">IPCC_C1_TX_IRQHandler</a> from stm32wbxx_it.o(.text.IPCC_C1_TX_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[51]">LCD_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4f]">LPTIM1_IRQHandler</a> from stm32wbxx_it.o(.text.LPTIM1_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[50]">LPTIM2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[45]">LPUART1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[19]">MemManage_Handler</a> from stm32wbxx_it.o(.text.MemManage_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[17]">NMI_Handler</a> from stm32wbxx_it.o(.text.NMI_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[71]">P2PS_Send_Notification</a> from p2p_server_app.o(.text.P2PS_Send_Notification) referenced 2 times from p2p_server_app.o(.text.P2PS_APP_Init)
 <LI><a href="#[3d]">PKA_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[21]">PVD_PVM_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[82]">PWR_EnterOffMode</a> from stm32_lpm_if.o(.text.PWR_EnterOffMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[7e]">PWR_EnterSleepMode</a> from stm32_lpm_if.o(.text.PWR_EnterSleepMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[80]">PWR_EnterStopMode</a> from stm32_lpm_if.o(.text.PWR_EnterStopMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[83]">PWR_ExitOffMode</a> from stm32_lpm_if.o(.text.PWR_ExitOffMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[7f]">PWR_ExitSleepMode</a> from stm32_lpm_if.o(.text.PWR_ExitSleepMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[81]">PWR_ExitStopMode</a> from stm32_lpm_if.o(.text.PWR_ExitStopMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[4b]">PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[72]">PeerToPeer_Event_Handler</a> from p2p_stm.o(.text.PeerToPeer_Event_Handler) referenced 2 times from p2p_stm.o(.text.P2PS_STM_Init)
 <LI><a href="#[1e]">PendSV_Handler</a> from stm32wbxx_it.o(.text.PendSV_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[52]">QUADSPI_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[25]">RCC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[55]">RNG_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[49]">RTC_Alarm_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[23]">RTC_WKUP_IRQHandler</a> from stm32wbxx_it.o(.text.RTC_WKUP_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[16]">Reset_Handler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[46]">SAI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[42]">SPI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[43]">SPI2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1c]">SVC_Handler</a> from stm32wbxx_it.o(.text.SVC_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[73]">SendFreeBuf</a> from tl_mbox.o(.text.SendFreeBuf) referenced 2 times from tl_mbox.o(.text.TL_MM_EvtDone)
 <LI><a href="#[66]">Switch_OFF_GPIO</a> from app_ble.o(.text.Switch_OFF_GPIO) referenced 2 times from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[1f]">SysTick_Handler</a> from stm32wbxx_it.o(.text.SysTick_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5f]">SystemInit</a> from system_stm32wbxx.o(.text.SystemInit) referenced from startup_stm32wb55xx_cm4.o(.text)
 <LI><a href="#[22]">TAMP_STAMP_LSECSS_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[38]">TIM1_BRK_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3b]">TIM1_CC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3a]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[39]">TIM1_UP_TIM16_IRQHandler</a> from stm32wbxx_it.o(.text.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3c]">TIM2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[7a]">TL_BLE_Init</a> from tl_mbox.o(.text.TL_BLE_Init) referenced 2 times from hci_tl_if.o(.text.hci_register_io_bus)
 <LI><a href="#[7b]">TL_BLE_SendCmd</a> from tl_mbox.o(.text.TL_BLE_SendCmd) referenced 2 times from hci_tl_if.o(.text.hci_register_io_bus)
 <LI><a href="#[7c]">TL_SYS_Init</a> from tl_mbox.o(.text.TL_SYS_Init) referenced 2 times from shci_tl_if.o(.text.shci_register_io_bus)
 <LI><a href="#[7d]">TL_SYS_SendCmd</a> from tl_mbox.o(.text.TL_SYS_SendCmd) referenced 2 times from shci_tl_if.o(.text.shci_register_io_bus)
 <LI><a href="#[47]">TSC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[75]">TlCmdEvtReceived</a> from shci_tl.o(.text.TlCmdEvtReceived) referenced 2 times from shci_tl.o(.text.TlInit)
 <LI><a href="#[74]">TlEvtReceived</a> from hci_tl.o(.text.TlEvtReceived) referenced 2 times from hci_tl.o(.text.TlInit)
 <LI><a href="#[76]">TlUserEvtReceived</a> from shci_tl.o(.text.TlUserEvtReceived) referenced 2 times from shci_tl.o(.text.TlInit)
 <LI><a href="#[6e]">UART_DMAError</a> from stm32wbxx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[6c]">UART_DMATransmitCplt</a> from stm32wbxx_hal_uart.o(.text.UART_DMATransmitCplt) referenced 2 times from stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[6d]">UART_DMATxHalfCplt</a> from stm32wbxx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced 2 times from stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[44]">USART1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5]">USBD_CDC_ConfigStrDescriptor</a> from usbd_desc.o(.text.USBD_CDC_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data.CDC_Desc)
 <LI><a href="#[b]">USBD_CDC_DataIn</a> from usbd_cdc.o(.text.USBD_CDC_DataIn) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[c]">USBD_CDC_DataOut</a> from usbd_cdc.o(.text.USBD_CDC_DataOut) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[8]">USBD_CDC_DeInit</a> from usbd_cdc.o(.text.USBD_CDC_DeInit) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[0]">USBD_CDC_DeviceDescriptor</a> from usbd_desc.o(.text.USBD_CDC_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data.CDC_Desc)
 <LI><a href="#[a]">USBD_CDC_EP0_RxReady</a> from usbd_cdc.o(.text.USBD_CDC_EP0_RxReady) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[10]">USBD_CDC_GetDeviceQualifierDescriptor</a> from usbd_cdc.o(.text.USBD_CDC_GetDeviceQualifierDescriptor) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[e]">USBD_CDC_GetFSCfgDesc</a> from usbd_cdc.o(.text.USBD_CDC_GetFSCfgDesc) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[d]">USBD_CDC_GetHSCfgDesc</a> from usbd_cdc.o(.text.USBD_CDC_GetHSCfgDesc) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[f]">USBD_CDC_GetOtherSpeedCfgDesc</a> from usbd_cdc.o(.text.USBD_CDC_GetOtherSpeedCfgDesc) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[7]">USBD_CDC_Init</a> from usbd_cdc.o(.text.USBD_CDC_Init) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[6]">USBD_CDC_InterfaceStrDescriptor</a> from usbd_desc.o(.text.USBD_CDC_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data.CDC_Desc)
 <LI><a href="#[1]">USBD_CDC_LangIDStrDescriptor</a> from usbd_desc.o(.text.USBD_CDC_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data.CDC_Desc)
 <LI><a href="#[2]">USBD_CDC_ManufacturerStrDescriptor</a> from usbd_desc.o(.text.USBD_CDC_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data.CDC_Desc)
 <LI><a href="#[3]">USBD_CDC_ProductStrDescriptor</a> from usbd_desc.o(.text.USBD_CDC_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data.CDC_Desc)
 <LI><a href="#[4]">USBD_CDC_SerialStrDescriptor</a> from usbd_desc.o(.text.USBD_CDC_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data.CDC_Desc)
 <LI><a href="#[9]">USBD_CDC_Setup</a> from usbd_cdc.o(.text.USBD_CDC_Setup) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[33]">USB_HP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[34]">USB_LP_IRQHandler</a> from stm32wbxx_it.o(.text.USB_LP_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1b]">UsageFault_Handler</a> from stm32wbxx_it.o(.text.UsageFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[20]">WWDG_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[60]">__main</a> from __main.o(!!!main) referenced from startup_stm32wb55xx_cm4.o(.text)
 <LI><a href="#[62]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[61]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[63]">hci_user_evt_proc</a> from hci_tl.o(.text.hci_user_evt_proc) referenced 2 times from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[77]">shci_user_evt_proc</a> from shci_tl.o(.text.shci_user_evt_proc) referenced 2 times from app_entry.o(.text.appe_Tl_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[60]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[86]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[346]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[347]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[348]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[349]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[34a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[87]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a3]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[89]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[34b]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[95]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[34c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[34d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[34e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[34f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[350]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[351]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[352]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[90]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[353]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[354]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[355]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[356]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[357]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[358]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[359]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[35a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[35b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[35c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[35d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[35e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[35f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[9a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[360]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[361]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[362]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[363]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[364]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[365]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[366]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[85]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[367]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[92]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[94]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[368]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[96]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[369]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b4]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[99]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[36a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[9b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[16]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>AES1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>AES2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>C2SEV_PWR_C2H_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TAMP_STAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32wb55xx_cm4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2bb]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[36b]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure
</UL>

<P><STRONG><a name="[8a]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[a1]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[323]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
</UL>

<P><STRONG><a name="[255]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WriteMulti
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_load_tuning_settings
</UL>

<P><STRONG><a name="[a4]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[36c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>

<P><STRONG><a name="[2a2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[36d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[36f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ae]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[9e]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[9f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[61]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[372]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8f]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ad]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b0]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[a9]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[377]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[378]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[98]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[345]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[9c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[379]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>ADC1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32wbxx_it.o(.text.ADC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC1_IRQHandler &rArr; HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32wbxx_hal_adc.o(.text.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsTriggerSourceSWStart
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[69]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32wbxx_hal_adc.o(.text.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[6b]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32wbxx_hal_adc.o(.text.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[ba]"></a>ADC_Enable</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, stm32wbxx_hal_adc.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetCommonPathInternalCh
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[bf]"></a>APPD_EnableCPU2</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, app_debug.o(.text.APPD_EnableCPU2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = APPD_EnableCPU2 &rArr; SHCI_C2_DEBUG_Init &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_DEBUG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[c2]"></a>APP_BLE_Init</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, app_ble.o(.text.APP_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = APP_BLE_Init &rArr; SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; P2PS_STM_Init &rArr; aci_gatt_add_service &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_BLE_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Tl_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Create
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[289]"></a>BAS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.BAS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[28a]"></a>BLS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.BLS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[297]"></a>BVOPUS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.BVOPUS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[1a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[28b]"></a>CRS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.CRS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[28c]"></a>DIS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.DIS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[2b]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32wbxx_it.o(.text.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32wbxx_it.o(.text.DMA2_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Channel4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[28d]"></a>EDS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.EDS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[c7]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_Device_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPTIM1_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IPCC_Init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[101]"></a>HAL_ADCEx_EndOfSamplingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_adc_ex.o(.text.HAL_ADCEx_EndOfSamplingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_adc_ex.o(.text.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>HAL_ADCEx_InjectedQueueOverflowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_adc_ex.o(.text.HAL_ADCEx_InjectedQueueOverflowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>HAL_ADCEx_LevelOutOfWindow2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_adc_ex.o(.text.HAL_ADCEx_LevelOutOfWindow2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>HAL_ADCEx_LevelOutOfWindow3Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_adc_ex.o(.text.HAL_ADCEx_LevelOutOfWindow3Callback))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 780 bytes, Stack size 24 bytes, stm32wbxx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; LL_ADC_SetChannelSingleDiff
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetOffsetChannel
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetCommonPathInternalCh
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetState
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffset
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonPathInternalCh
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSingleDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_entry.o(.text.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[b9]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[b6]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[b5]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, stm32wbxx_hal_adc.o(.text.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsTriggerSourceSWStart
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_GetDMATransfer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsTriggerSourceSWStart
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_LevelOutOfWindow3Callback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_LevelOutOfWindow2Callback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedQueueOverflowCallback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_EndOfSamplingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>HAL_ADC_Init</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, stm32wbxx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsInternalRegulatorEnabled
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsDeepPowerDownEnabled
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableInternalRegulator
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DisableDeepPowerDown
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonClock
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, stm32wbxx_hal_msp.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[115]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, stm32wbxx_hal_adc.o(.text.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[ec]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32wbxx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>HAL_DMA_Init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, stm32wbxx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[116]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32wbxx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[11b]"></a>HAL_Delay</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, app_entry.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTickFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_EnableSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHUT
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_Send_Notification
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PollingDelay
</UL>

<P><STRONG><a name="[111]"></a>HAL_GPIO_Init</STRONG> (Thumb, 398 bytes, Stack size 44 bytes, stm32wbxx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[23f]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHUT
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[11c]"></a>HAL_GetTickFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal.o(.text.HAL_GetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_GetTickPrio</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal.o(.text.HAL_GetTickPrio))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[11f]"></a>HAL_HSEM_FreeCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_hsem.o(.text.HAL_HSEM_FreeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>HAL_HSEM_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32wbxx_hal_hsem.o(.text.HAL_HSEM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HSEM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_FreeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSEM_IRQHandler
</UL>

<P><STRONG><a name="[241]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32wbxx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[242]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32wbxx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_I2C_Init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32wbxx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[122]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, stm32wbxx_hal_i2c.o(.text.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CRead
</UL>

<P><STRONG><a name="[127]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, stm32wbxx_hal_i2c.o(.text.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
</UL>

<P><STRONG><a name="[121]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stm32wbxx_hal_msp.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_IPCC_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_IPCC_Init &rArr; HAL_IPCC_MspInit &rArr; LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_MspInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_SetDefaultCallbacks
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_Reset_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IPCC_Init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_IPCC_MspInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(.text.HAL_IPCC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_IPCC_MspInit &rArr; LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
</UL>

<P><STRONG><a name="[6f]"></a>HAL_IPCC_RxCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_RxCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_ipcc.o(.text.IPCC_SetDefaultCallbacks)
</UL>
<P><STRONG><a name="[70]"></a>HAL_IPCC_TxCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_TxCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_ipcc.o(.text.IPCC_SetDefaultCallbacks)
</UL>
<P><STRONG><a name="[2a0]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[12f]"></a>HAL_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32wbxx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>HAL_InitTick</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32wbxx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[137]"></a>HAL_LPTIM_AutoReloadMatchCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.HAL_LPTIM_AutoReloadMatchCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>HAL_LPTIM_AutoReloadWriteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.HAL_LPTIM_AutoReloadWriteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>HAL_LPTIM_CompareMatchCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.HAL_LPTIM_CompareMatchCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_LPTIM_CompareWriteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.HAL_LPTIM_CompareWriteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>HAL_LPTIM_DirectionDownCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.HAL_LPTIM_DirectionDownCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>HAL_LPTIM_DirectionUpCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.HAL_LPTIM_DirectionUpCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>HAL_LPTIM_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.HAL_LPTIM_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_TimeOut_Start_IT
</UL>

<P><STRONG><a name="[135]"></a>HAL_LPTIM_IRQHandler</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32wbxx_hal_lptim.o(.text.HAL_LPTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LPTIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_TriggerCallback
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_DirectionUpCallback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_DirectionDownCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_CompareWriteCallback
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_CompareMatchCallback
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_AutoReloadWriteCallback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_AutoReloadMatchCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM1_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>HAL_LPTIM_Init</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, stm32wbxx_hal_lptim.o(.text.HAL_LPTIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_LPTIM_Init &rArr; HAL_LPTIM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPTIM1_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_LPTIM_MspInit</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32wbxx_hal_msp.o(.text.HAL_LPTIM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_LPTIM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_LPTIM_TimeOut_Start_IT</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32wbxx_hal_lptim.o(.text.HAL_LPTIM_TimeOut_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_LPTIM_TimeOut_Start_IT &rArr; LPTIM_Disable &rArr; LPTIM_WaitForFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_Disable
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_GetState
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_WaitForFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[138]"></a>HAL_LPTIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.HAL_LPTIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>HAL_MspInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB3_GRP1_EnableClock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[143]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wbxx_hal_cortex.o(.text.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
</UL>

<P><STRONG><a name="[145]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wbxx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
</UL>

<P><STRONG><a name="[114]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wbxx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[148]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wbxx_hal_cortex.o(.text.HAL_NVIC_SetPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
</UL>

<P><STRONG><a name="[113]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32wbxx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[130]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wbxx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[171]"></a>HAL_PCDEx_ActivateLPM</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32wbxx_hal_pcd_ex.o(.text.HAL_PCDEx_ActivateLPM))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[14e]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usbd_conf.o(.text.HAL_PCDEx_LPM_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = HAL_PCDEx_LPM_Callback &rArr; SystemClockConfig_Resume &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_PCDEx_PMAConfig</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32wbxx_hal_pcd_ex.o(.text.HAL_PCDEx_PMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_PMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[152]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_conf.o(.text.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_DB_Transmit
</UL>

<P><STRONG><a name="[154]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_conf.o(.text.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[156]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[158]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[2d4]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[15e]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[160]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[162]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[164]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[165]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCD_ResumeCallback &rArr; SystemClockConfig_Resume &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>HAL_PCD_Init</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_ActivateLPM
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[16e]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, usbd_conf.o(.text.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[168]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_conf.o(.text.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[16a]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_conf.o(.text.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = HAL_PCD_ResumeCallback &rArr; SystemClockConfig_Resume &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_conf.o(.text.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[178]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(.text.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[17a]"></a>HAL_PCD_Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[16b]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_conf.o(.text.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_PWREx_EnableVddUSB</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr_ex.o(.text.HAL_PWREx_EnableVddUSB))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[17f]"></a>HAL_PWREx_EnterSTOP0Mode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr_ex.o(.text.HAL_PWREx_EnterSTOP0Mode))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[17e]"></a>HAL_PWREx_EnterSTOP1Mode</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr_ex.o(.text.HAL_PWREx_EnterSTOP1Mode))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[268]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[185]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_BackupDomain
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[17d]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32wbxx_hal_pwr.o(.text.HAL_PWR_EnterSTOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWR_EnterSTOPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOP1Mode
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOP0Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[180]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc_ex.o(.text.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_EnableMSIPLLMode
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_EnablePLLMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[182]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetUSBClockSource
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetUSARTClockSource
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSMPSPrescaler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSMPSClockSource
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSAIClockSource
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRTCClockSource
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRNGClockSource
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRFWKPClockSource
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetLPUARTClockSource
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetLPTIMClockSource
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetI2CClockSource
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetCLK48ClockSource
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetADCClockSource
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ReleaseBackupDomainReset
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsEnabled
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetRTCClockSource
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ForceBackupDomainReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[199]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 482 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSysClkSource
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB2Prescaler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB1Prescaler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAHBPrescaler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAHB4Prescaler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_IsReady
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_SHDHPRE
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_PPRE2
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_PPRE1
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HPRE
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_C2HPRE
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C2_RCC_SetAHBPrescaler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTickPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[133]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHBPrescaler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB1Prescaler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1af]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB2Prescaler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32wbxx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetR
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetN
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetDivider
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsEnabledDiv2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1432 bytes, Stack size 32 bytes, stm32wbxx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_Enable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_Disable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_SetRange
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_SetCalibTrimming
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_Enable
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_Disable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI2_SetTrimming
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI2_IsReady
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI2_Enable
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI2_Disable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI1_IsReady
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI1_Enable
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI1_Disable
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_EnableBypass
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_Enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_DisableBypass
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_Disable
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_SetCalibTrimming
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_Enable
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_Disable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI48_IsReady
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI48_Enable
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI48_Disable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_Enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_Disable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_RTC_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32wbxx_hal_rtc.o(.text.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(.text.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTC_MspInit &rArr; LL_APB1_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_EnableRTC
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32wbxx_hal_rtc.o(.text.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[261]"></a>HAL_ResumeTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal.o(.text.HAL_ResumeTick))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ExitStopMode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ExitSleepMode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ExitOffMode
</UL>

<P><STRONG><a name="[134]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wbxx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[25c]"></a>HAL_SuspendTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal.o(.text.HAL_SuspendTick))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStopMode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSleepMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterOffMode
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim_ex.o(.text.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[247]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32wbxx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32wbxx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1da]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[287]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, stm32wbxx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, stm32wbxx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_entry.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[249]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32wbxx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32wbxx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1ed]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32wbxx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[2b6]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_UART_MspInit</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, stm32wbxx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[2b8]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[28e]"></a>HIDS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.HIDS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[28f]"></a>HRS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.HRS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[4e]"></a>HSEM_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wbxx_it.o(.text.HSEM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HSEM_IRQHandler &rArr; HAL_HSEM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[290]"></a>HTS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.HTS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[1f6]"></a>HW_IPCC_BLE_AclDataAckNot</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tl_mbox.o(.text.HW_IPCC_BLE_AclDataAckNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_BLE_AclDataAckNot
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_AclDataEvtHandler
</UL>

<P><STRONG><a name="[1fa]"></a>HW_IPCC_BLE_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_BLE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_EnableReceiveChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_Init
</UL>

<P><STRONG><a name="[1f8]"></a>HW_IPCC_BLE_RxEvtNot</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tl_mbox.o(.text.HW_IPCC_BLE_RxEvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_IPCC_BLE_RxEvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_EvtHandler
</UL>

<P><STRONG><a name="[1fe]"></a>HW_IPCC_BLE_SendCmd</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_BLE_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_BLE_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_SetFlag_CHx
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_SendCmd
</UL>

<P><STRONG><a name="[200]"></a>HW_IPCC_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HW_IPCC_Enable &rArr; LL_C2_AHB3_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableBootC2
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig_32_63
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C2_EXTI_EnableEvent_32_63
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C2_AHB3_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Enable
</UL>

<P><STRONG><a name="[205]"></a>HW_IPCC_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_IPCC_Init &rArr; HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_EnableIT_TXF
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_EnableIT_RXO
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB3_GRP1_EnableClock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Init
</UL>

<P><STRONG><a name="[20a]"></a>HW_IPCC_MM_SendFreeBuf</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_MM_SendFreeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_SetFlag_CHx
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_IsActiveFlag_CHx
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_EnableTransmitChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
</UL>

<P><STRONG><a name="[20d]"></a>HW_IPCC_Rx_Handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_Rx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HW_IPCC_Rx_Handler &rArr; HW_IPCC_TRACES_EvtHandler &rArr; HW_IPCC_TRACES_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C2_IPCC_IsActiveFlag_CHx
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtHandler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_EvtHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_C1_RX_IRQHandler
</UL>

<P><STRONG><a name="[212]"></a>HW_IPCC_SYS_CmdEvtNot</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tl_mbox.o(.text.HW_IPCC_SYS_CmdEvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_SYS_CmdEvtNot
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_CmdEvtHandler
</UL>

<P><STRONG><a name="[213]"></a>HW_IPCC_SYS_EvtNot</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tl_mbox.o(.text.HW_IPCC_SYS_EvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_IPCC_SYS_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtHandler
</UL>

<P><STRONG><a name="[214]"></a>HW_IPCC_SYS_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_SYS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_EnableReceiveChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_Init
</UL>

<P><STRONG><a name="[215]"></a>HW_IPCC_SYS_SendCmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_SYS_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_SYS_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_SetFlag_CHx
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_EnableTransmitChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_SendCmd
</UL>

<P><STRONG><a name="[216]"></a>HW_IPCC_TRACES_EvtNot</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tl_mbox.o(.text.HW_IPCC_TRACES_EvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_IPCC_TRACES_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_EvtReceived
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtHandler
</UL>

<P><STRONG><a name="[218]"></a>HW_IPCC_TRACES_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_TRACES_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_TRACES_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_EnableReceiveChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
</UL>

<P><STRONG><a name="[219]"></a>HW_IPCC_Tx_Handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_Tx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_IPCC_Tx_Handler &rArr; HW_IPCC_SYS_CmdEvtHandler &rArr; HW_IPCC_SYS_CmdEvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_IsActiveFlag_CHx
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_CmdEvtHandler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_FreeBufHandler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_AclDataEvtHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_C1_TX_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HW_TS_Create</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, hw_timerserver.o(.text.HW_TS_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HW_TS_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[21a]"></a>HW_TS_Init</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, hw_timerserver.o(.text.HW_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_TS_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig_0_31
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT_0_31
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[220]"></a>HW_TS_RTC_Int_AppNot</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, hw_timerserver.o(.text.HW_TS_RTC_Int_AppNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_TS_RTC_Int_AppNot
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[21d]"></a>HW_TS_RTC_Wakeup_Handler</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, hw_timerserver.o(.text.HW_TS_RTC_Wakeup_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HW_TS_RTC_Wakeup_Handler &rArr; HW_TS_Start &rArr; HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter &rArr; HAL_NVIC_SetPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Int_AppNot
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlinkTimer
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>HW_TS_Start</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, hw_timerserver.o(.text.HW_TS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HW_TS_Start &rArr; HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter &rArr; HAL_NVIC_SetPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTimer
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[d0]"></a>HW_TS_Stop</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, hw_timerserver.o(.text.HW_TS_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter &rArr; HAL_NVIC_SetPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlinkTimer
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[18]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[291]"></a>IAS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.IAS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[4c]"></a>IPCC_C1_RX_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wbxx_it.o(.text.IPCC_C1_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IPCC_C1_RX_IRQHandler &rArr; HW_IPCC_Rx_Handler &rArr; HW_IPCC_TRACES_EvtHandler &rArr; HW_IPCC_TRACES_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IPCC_C1_TX_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wbxx_it.o(.text.IPCC_C1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IPCC_C1_TX_IRQHandler &rArr; HW_IPCC_Tx_Handler &rArr; HW_IPCC_SYS_CmdEvtHandler &rArr; HW_IPCC_SYS_CmdEvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>IPCC_Reset_Register</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_ipcc.o(.text.IPCC_Reset_Register))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
</UL>

<P><STRONG><a name="[12d]"></a>IPCC_SetDefaultCallbacks</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32wbxx_hal_ipcc.o(.text.IPCC_SetDefaultCallbacks))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
</UL>

<P><STRONG><a name="[224]"></a>Init_Exti</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_entry.o(.text.Init_Exti))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Exti
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_32_63
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[292]"></a>LLS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.LLS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[4f]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32wbxx_it.o(.text.LPTIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPTIM1_IRQHandler &rArr; HAL_LPTIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>LPTIM_Disable</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, stm32wbxx_hal_lptim.o(.text.LPTIM_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LPTIM_Disable &rArr; LPTIM_WaitForFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_WaitForFlag
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetLPTIMClockSource
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPTIMClockSource
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_ReleaseReset
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_ForceReset
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ReleaseReset
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_TimeOut_Start_IT
</UL>

<P><STRONG><a name="[2a7]"></a>LST_init_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm_list.o(.text.LST_init_head))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_Init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlInit
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_Init
</UL>

<P><STRONG><a name="[33a]"></a>LST_insert_head</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm_list.o(.text.LST_insert_head))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
</UL>

<P><STRONG><a name="[29b]"></a>LST_insert_tail</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm_list.o(.text.LST_insert_tail))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlUserEvtReceived
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
</UL>

<P><STRONG><a name="[1fc]"></a>LST_is_empty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm_list.o(.text.LST_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
</UL>

<P><STRONG><a name="[1fd]"></a>LST_remove_head</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm_list.o(.text.LST_remove_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
</UL>

<P><STRONG><a name="[231]"></a>LST_remove_node</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm_list.o(.text.LST_remove_node))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
</UL>

<P><STRONG><a name="[298]"></a>MESH_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.MESH_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[294]"></a>MOTENV_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.MOTENV_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[233]"></a>MX_APPE_Config</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_entry.o(.text.MX_APPE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MX_APPE_Config &rArr; Reset_Device &rArr; Reset_IPCC &rArr; LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Device
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_HSE
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[235]"></a>MX_APPE_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_entry.o(.text.MX_APPE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_APPE_Init &rArr; appe_Tl_Init &rArr; shci_init &rArr; TlInit &rArr; Cmd_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appe_Tl_Init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPower_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[239]"></a>MX_APPE_Process</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_entry.o(.text.MX_APPE_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_APPE_Process &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a]"></a>MX_USB_Device_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usb_device.o(.text.MX_USB_Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MX_USB_Device_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_RegisterInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24f]"></a>Measure</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, p2p_server_app.o(.text.Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = Measure &rArr; Run_Dev &rArr; VL53L0X_StaticInit &rArr; VL53L0X_perform_ref_spad_management &rArr; perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleRangingMeasurement
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHUT
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Dev
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_App_Update_Int16
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_Send_Notification
</UL>

<P><STRONG><a name="[19]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[296]"></a>OTAS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.OTAS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[db]"></a>OTP_Read</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, otp.o(.text.OTP_Read))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleGetBdAddress
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_HSE
</UL>

<P><STRONG><a name="[254]"></a>Osal_MemCpy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, osal.o(.text.Osal_MemCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Osal_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[256]"></a>Osal_MemSet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, osal.o(.text.Osal_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Osal_MemSet &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_phy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_whitelist
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[cb]"></a>P2PS_APP_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, p2p_server_app.o(.text.P2PS_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = P2PS_APP_Init &rArr; UTIL_SEQ_RegTask
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[285]"></a>P2PS_APP_Notification</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, p2p_server_app.o(.text.P2PS_APP_Notification))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[262]"></a>P2PS_STM_App_Notification</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, p2p_server_app.o(.text.P2PS_STM_App_Notification))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeerToPeer_Event_Handler
</UL>

<P><STRONG><a name="[257]"></a>P2PS_STM_App_Update_Char</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, p2p_stm.o(.text.P2PS_STM_App_Update_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = P2PS_STM_App_Update_Char &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_Send_Notification
</UL>

<P><STRONG><a name="[253]"></a>P2PS_STM_App_Update_Int16</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, p2p_stm.o(.text.P2PS_STM_App_Update_Int16))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = P2PS_STM_App_Update_Int16 &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure
</UL>

<P><STRONG><a name="[258]"></a>P2PS_STM_Init</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, p2p_stm.o(.text.P2PS_STM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = P2PS_STM_Init &rArr; aci_gatt_add_service &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_RegisterSvcHandler
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[71]"></a>P2PS_Send_Notification</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, p2p_server_app.o(.text.P2PS_Send_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = P2PS_Send_Notification &rArr; Measure &rArr; Run_Dev &rArr; VL53L0X_StaticInit &rArr; VL53L0X_perform_ref_spad_management &rArr; perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_App_Update_Char
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p2p_server_app.o(.text.P2PS_APP_Init)
</UL>
<P><STRONG><a name="[82]"></a>PWR_EnterOffMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_EnterOffMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWR_EnterOffMode &rArr; EnterLowPower &rArr; Switch_On_HSI
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SetPowerMode
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_ClearFlag_WU
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_EnableDeepSleep
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterLowPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[7e]"></a>PWR_EnterSleepMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_EnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWR_EnterSleepMode
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_EnableSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[80]"></a>PWR_EnterStopMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_EnterStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWR_EnterStopMode &rArr; EnterLowPower &rArr; Switch_On_HSI
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SetPowerMode
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_EnableDeepSleep
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterLowPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[83]"></a>PWR_ExitOffMode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_ExitOffMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWR_ExitOffMode
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[7f]"></a>PWR_ExitSleepMode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_ExitSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWR_ExitSleepMode
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[81]"></a>PWR_ExitStopMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_ExitStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWR_ExitStopMode &rArr; ExitLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitLowPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[1e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1d5]"></a>RTC_EnterInitMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32wbxx_hal_rtc.o(.text.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[23]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wbxx_it.o(.text.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RTC_WKUP_IRQHandler &rArr; HW_TS_RTC_Wakeup_Handler &rArr; HW_TS_Start &rArr; HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter &rArr; HAL_NVIC_SetPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[251]"></a>Run_Dev</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, p2p_server_app.o(.text.Run_Dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = Run_Dev &rArr; VL53L0X_StaticInit &rArr; VL53L0X_perform_ref_spad_management &rArr; perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WaitDeviceBooted
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetVcselPulsePeriod
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckValue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckEnable
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetDeviceMode
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformRefSpadManagement
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformRefCalibration
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure
</UL>

<P><STRONG><a name="[2e7]"></a>SEQ_BitPosition</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32_seq.o(.text.SEQ_BitPosition))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
</UL>

<P><STRONG><a name="[c6]"></a>SHCI_C2_BLE_Init</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, shci.o(.text.SHCI_C2_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SHCI_C2_BLE_Init &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[c1]"></a>SHCI_C2_DEBUG_Init</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, shci.o(.text.SHCI_C2_DEBUG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SHCI_C2_DEBUG_Init &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
</UL>

<P><STRONG><a name="[250]"></a>SHUT</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, p2p_server_app.o(.text.SHUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SHUT &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure
</UL>

<P><STRONG><a name="[284]"></a>SVCCTL_App_Notification</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, app_ble.o(.text.SVCCTL_App_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_phy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_Notification
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_TimeOut_Start_IT
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_UserEvtRx
</UL>

<P><STRONG><a name="[c9]"></a>SVCCTL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, svc_ctl.o(.text.SVCCTL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; P2PS_STM_Init &rArr; aci_gatt_add_service &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[299]"></a>SVCCTL_InitCustomSvc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.SVCCTL_InitCustomSvc))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[259]"></a>SVCCTL_RegisterSvcHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, svc_ctl.o(.text.SVCCTL_RegisterSvcHandler))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
</UL>

<P><STRONG><a name="[288]"></a>SVCCTL_SvcInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, svc_ctl.o(.text.SVCCTL_SvcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = SVCCTL_SvcInit &rArr; P2PS_STM_Init &rArr; aci_gatt_add_service &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDD_STM_Init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPS_Init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_InitCustomSvc
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTAS_STM_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTENV_STM_Init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESH_Init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLS_Init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAS_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS_Init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIDS_Init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDS_STM_Init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIS_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRS_STM_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BVOPUS_STM_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLS_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAS_Init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[d6]"></a>SVCCTL_UserEvtRx</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, svc_ctl.o(.text.SVCCTL_UserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = SVCCTL_UserEvtRx &rArr; SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UserEvtRx
</UL>

<P><STRONG><a name="[1c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wbxx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2a1]"></a>SystemClock_Config</STRONG> (Thumb, 264 bytes, Stack size 208 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_SetDriveCapability
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig_Resume
</UL>

<P><STRONG><a name="[5f]"></a>SystemInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_stm32wbxx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32wbxx_it.o(.text.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1db]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32wbxx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1de]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(.text.TIM_ETR_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[7a]"></a>TL_BLE_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tl_mbox.o(.text.TL_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TL_BLE_Init &rArr; HW_IPCC_BLE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_Init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl_if.o(.text.hci_register_io_bus)
</UL>
<P><STRONG><a name="[7b]"></a>TL_BLE_SendCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tl_mbox.o(.text.TL_BLE_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TL_BLE_SendCmd &rArr; HW_IPCC_BLE_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_SendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl_if.o(.text.hci_register_io_bus)
</UL>
<P><STRONG><a name="[2a8]"></a>TL_Enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tl_mbox.o(.text.TL_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TL_Enable &rArr; HW_IPCC_Enable &rArr; LL_C2_AHB3_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appe_Tl_Init
</UL>

<P><STRONG><a name="[2a9]"></a>TL_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, tl_mbox.o(.text.TL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TL_Init &rArr; HW_IPCC_Init &rArr; HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appe_Tl_Init
</UL>

<P><STRONG><a name="[2aa]"></a>TL_MM_EvtDone</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tl_mbox.o(.text.TL_MM_EvtDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_SendFreeBuf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
</UL>

<P><STRONG><a name="[2ab]"></a>TL_MM_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tl_mbox.o(.text.TL_MM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TL_MM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appe_Tl_Init
</UL>

<P><STRONG><a name="[7c]"></a>TL_SYS_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tl_mbox.o(.text.TL_SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TL_SYS_Init &rArr; HW_IPCC_SYS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_Init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl_if.o(.text.shci_register_io_bus)
</UL>
<P><STRONG><a name="[7d]"></a>TL_SYS_SendCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tl_mbox.o(.text.TL_SYS_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TL_SYS_SendCmd &rArr; HW_IPCC_SYS_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_SendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl_if.o(.text.shci_register_io_bus)
</UL>
<P><STRONG><a name="[217]"></a>TL_TRACES_EvtReceived</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tl_mbox.o(.text.TL_TRACES_EvtReceived))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
</UL>

<P><STRONG><a name="[c0]"></a>TL_TRACES_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tl_mbox.o(.text.TL_TRACES_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TL_TRACES_Init &rArr; HW_IPCC_TRACES_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_Init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
</UL>

<P><STRONG><a name="[293]"></a>TPS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.TPS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[1f1]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1f2]"></a>UART_CheckIdleState</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32wbxx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1f0]"></a>UART_SetConfig</STRONG> (Thumb, 580 bytes, Stack size 24 bytes, stm32wbxx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockSource
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockSource
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2b3]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, stm32wbxx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[5]"></a>USBD_CDC_ConfigStrDescriptor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_desc.o(.text.USBD_CDC_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CDC_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.CDC_Desc)
</UL>
<P><STRONG><a name="[0]"></a>USBD_CDC_DeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_desc.o(.text.USBD_CDC_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.CDC_Desc)
</UL>
<P><STRONG><a name="[10]"></a>USBD_CDC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc.o(.text.USBD_CDC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[6]"></a>USBD_CDC_InterfaceStrDescriptor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_desc.o(.text.USBD_CDC_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CDC_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.CDC_Desc)
</UL>
<P><STRONG><a name="[1]"></a>USBD_CDC_LangIDStrDescriptor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_desc.o(.text.USBD_CDC_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.CDC_Desc)
</UL>
<P><STRONG><a name="[2]"></a>USBD_CDC_ManufacturerStrDescriptor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_desc.o(.text.USBD_CDC_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CDC_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.CDC_Desc)
</UL>
<P><STRONG><a name="[3]"></a>USBD_CDC_ProductStrDescriptor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_desc.o(.text.USBD_CDC_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CDC_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.CDC_Desc)
</UL>
<P><STRONG><a name="[e9]"></a>USBD_CDC_ReceivePacket</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_cdc.o(.text.USBD_CDC_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
</UL>

<P><STRONG><a name="[24d]"></a>USBD_CDC_RegisterInterface</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_cdc.o(.text.USBD_CDC_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_Device_Init
</UL>

<P><STRONG><a name="[4]"></a>USBD_CDC_SerialStrDescriptor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_desc.o(.text.USBD_CDC_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CDC_SerialStrDescriptor &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.CDC_Desc)
</UL>
<P><STRONG><a name="[e8]"></a>USBD_CDC_SetRxBuffer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_cdc.o(.text.USBD_CDC_SetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
</UL>

<P><STRONG><a name="[e7]"></a>USBD_CDC_SetTxBuffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_cdc.o(.text.USBD_CDC_SetTxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
</UL>

<P><STRONG><a name="[2e1]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[2c9]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(.text.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[2ca]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(.text.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[2c6]"></a>USBD_CtlError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_ctlreq.o(.text.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2c4]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(.text.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
</UL>

<P><STRONG><a name="[2cc]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(.text.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[2c5]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(.text.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[2c8]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(.text.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[2bc]"></a>USBD_GetString</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_ctlreq.o(.text.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ProductStrDescriptor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ManufacturerStrDescriptor
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_InterfaceStrDescriptor
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[24b]"></a>USBD_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_Device_Init
</UL>

<P><STRONG><a name="[2d2]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[2bf]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[153]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, usbd_core.o(.text.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[155]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[2be]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_GetRxDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_GetRxDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataOut
</UL>

<P><STRONG><a name="[2d1]"></a>USBD_LL_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, usbd_conf.o(.text.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_PMAConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableVddUSB
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[2e3]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_conf.o(.text.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[2c2]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>

<P><STRONG><a name="[2c3]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[175]"></a>USBD_LL_Reset</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, usbd_core.o(.text.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[150]"></a>USBD_LL_Resume</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(.text.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
</UL>

<P><STRONG><a name="[176]"></a>USBD_LL_SOF</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[174]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_core.o(.text.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[2d7]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[179]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbd_core.o(.text.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[2cb]"></a>USBD_LL_StallEP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[2dc]"></a>USBD_LL_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[151]"></a>USBD_LL_Suspend</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(.text.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
</UL>

<P><STRONG><a name="[2bd]"></a>USBD_LL_Transmit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataIn
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[2d8]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_ctlreq.o(.text.USBD_ParseSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ParseSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWAPBYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[24c]"></a>USBD_RegisterClass</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_core.o(.text.USBD_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_RegisterClass
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_Device_Init
</UL>

<P><STRONG><a name="[2e0]"></a>USBD_SetClassConfig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[24e]"></a>USBD_Start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_Device_Init
</UL>

<P><STRONG><a name="[2d9]"></a>USBD_StdDevReq</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usbd_ctlreq.o(.text.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[2da]"></a>USBD_StdEPReq</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, usbd_ctlreq.o(.text.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[2db]"></a>USBD_StdItfReq</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usbd_ctlreq.o(.text.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[2c0]"></a>USBD_static_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_conf.o(.text.USBD_static_free))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[2c1]"></a>USBD_static_malloc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_conf.o(.text.USBD_static_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[15f]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 510 bytes, Stack size 16 bytes, stm32wbxx_ll_usb.o(.text.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[157]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, stm32wbxx_ll_usb.o(.text.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[17c]"></a>USB_DevConnect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(.text.USB_DevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[170]"></a>USB_DevInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(.text.USB_DevInit))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[16f]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(.text.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[159]"></a>USB_EPClearStall</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32wbxx_ll_usb.o(.text.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[163]"></a>USB_EPSetStall</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(.text.USB_EPSetStall))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[161]"></a>USB_EPStartXfer</STRONG> (Thumb, 1692 bytes, Stack size 24 bytes, stm32wbxx_ll_usb.o(.text.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePMA
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[17b]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(.text.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[34]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32wbxx_it.o(.text.USB_LP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = USB_LP_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_ResumeCallback &rArr; SystemClockConfig_Resume &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[166]"></a>USB_ReadInterrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(.text.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>USB_ReadPMA</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(.text.USB_ReadPMA))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_DB_Receive
</UL>

<P><STRONG><a name="[177]"></a>USB_SetDevAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(.text.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[15d]"></a>USB_WritePMA</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(.text.USB_WritePMA))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_DB_Transmit
</UL>

<P><STRONG><a name="[2e6]"></a>UTIL_LPM_EnterLowPower</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32_lpm.o(.text.UTIL_LPM_EnterLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_LPM_EnterLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
</UL>

<P><STRONG><a name="[2a5]"></a>UTIL_LPM_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPower_Config
</UL>

<P><STRONG><a name="[c3]"></a>UTIL_LPM_SetOffMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_SetOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[2e4]"></a>UTIL_SEQ_EvtIdle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_entry.o(.text.UTIL_SEQ_EvtIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>

<P><STRONG><a name="[2e5]"></a>UTIL_SEQ_Idle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_entry.o(.text.UTIL_SEQ_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_EnterLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[d4]"></a>UTIL_SEQ_PauseTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PauseTask))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_StatusNot
</UL>

<P><STRONG><a name="[2e9]"></a>UTIL_SEQ_PostIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PostIdle))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[2e8]"></a>UTIL_SEQ_PreIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PreIdle))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[c5]"></a>UTIL_SEQ_RegTask</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32_seq.o(.text.UTIL_SEQ_RegTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_SEQ_RegTask
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appe_Tl_Init
</UL>

<P><STRONG><a name="[d5]"></a>UTIL_SEQ_ResumeTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_ResumeTask))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_StatusNot
</UL>

<P><STRONG><a name="[23a]"></a>UTIL_SEQ_Run</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, stm32_seq.o(.text.UTIL_SEQ_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PreIdle
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PostIdle
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Process
</UL>

<P><STRONG><a name="[336]"></a>UTIL_SEQ_SetEvt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_SetEvt))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_release
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_release
</UL>

<P><STRONG><a name="[cf]"></a>UTIL_SEQ_SetTask</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_SetTask))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel_Req
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[2ea]"></a>UTIL_SEQ_WaitEvt</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32_seq.o(.text.UTIL_SEQ_WaitEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_wait
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_wait
</UL>

<P><STRONG><a name="[1b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2eb]"></a>VL53L0X_CheckAndLoadInterruptSettings</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, vl53l0x_api.o(.text.VL53L0X_CheckAndLoadInterruptSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = VL53L0X_CheckAndLoadInterruptSettings &rArr; VL53L0X_load_tuning_settings &rArr; VL53L0X_WriteMulti &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_load_tuning_settings
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterruptThresholds
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StartMeasurement
</UL>

<P><STRONG><a name="[2ef]"></a>VL53L0X_ClearInterruptMask</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, vl53l0x_api.o(.text.VL53L0X_ClearInterruptMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_ClearInterruptMask &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleRangingMeasurement
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_single_ref_calibration
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetGpioConfig
</UL>

<P><STRONG><a name="[27a]"></a>VL53L0X_DataInit</STRONG> (Thumb, 498 bytes, Stack size 104 bytes, vl53l0x_api.o(.text.VL53L0X_DataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = VL53L0X_DataInit &rArr; VL53L0X_GetDeviceParameters &rArr; VL53L0X_GetMeasurementTimingBudgetMicroSeconds &rArr; VL53L0X_get_measurement_timing_budget_micro_seconds &rArr; get_sequence_step_timeout &rArr; VL53L0X_GetVcselPulsePeriod &rArr; VL53L0X_get_vcsel_pulse_period &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckValue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckEnable
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Dev
</UL>

<P><STRONG><a name="[2f2]"></a>VL53L0X_GetDeviceMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vl53l0x_api.o(.text.VL53L0X_GetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StartMeasurement
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleMeasurement
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[2f1]"></a>VL53L0X_GetDeviceParameters</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, vl53l0x_api.o(.text.VL53L0X_GetDeviceParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = VL53L0X_GetDeviceParameters &rArr; VL53L0X_GetMeasurementTimingBudgetMicroSeconds &rArr; VL53L0X_get_measurement_timing_budget_micro_seconds &rArr; get_sequence_step_timeout &rArr; VL53L0X_GetVcselPulsePeriod &rArr; VL53L0X_get_vcsel_pulse_period &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetXTalkCompensationRateMegaCps
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetWrapAroundCheckEnable
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetOffsetCalibrationDataMicroMeter
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetLimitCheckValue
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetLimitCheckEnable
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterMeasurementPeriodMilliSeconds
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceMode
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
</UL>

<P><STRONG><a name="[2fa]"></a>VL53L0X_GetFractionEnable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vl53l0x_api.o(.text.VL53L0X_GetFractionEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L0X_GetFractionEnable &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
</UL>

<P><STRONG><a name="[2f3]"></a>VL53L0X_GetInterMeasurementPeriodMilliSeconds</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, vl53l0x_api.o(.text.VL53L0X_GetInterMeasurementPeriodMilliSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_GetInterMeasurementPeriodMilliSeconds &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdDWord
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[2fd]"></a>VL53L0X_GetInterruptMaskStatus</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, vl53l0x_api.o(.text.VL53L0X_GetInterruptMaskStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L0X_GetInterruptMaskStatus &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetMeasurementDataReady
</UL>

<P><STRONG><a name="[2ec]"></a>VL53L0X_GetInterruptThresholds</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, vl53l0x_api.o(.text.VL53L0X_GetInterruptThresholds))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_GetInterruptThresholds &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_CheckAndLoadInterruptSettings
</UL>

<P><STRONG><a name="[2f7]"></a>VL53L0X_GetLimitCheckEnable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, vl53l0x_api.o(.text.VL53L0X_GetLimitCheckEnable))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_range_status
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[2f6]"></a>VL53L0X_GetLimitCheckValue</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, vl53l0x_api.o(.text.VL53L0X_GetLimitCheckValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_range_status
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[2fe]"></a>VL53L0X_GetMeasurementDataReady</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, vl53l0x_api.o(.text.VL53L0X_GetMeasurementDataReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L0X_GetMeasurementDataReady &rArr; VL53L0X_GetInterruptMaskStatus &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterruptMaskStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_measurement_poll_for_completion
</UL>

<P><STRONG><a name="[2f9]"></a>VL53L0X_GetMeasurementTimingBudgetMicroSeconds</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vl53l0x_api.o(.text.VL53L0X_GetMeasurementTimingBudgetMicroSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = VL53L0X_GetMeasurementTimingBudgetMicroSeconds &rArr; VL53L0X_get_measurement_timing_budget_micro_seconds &rArr; get_sequence_step_timeout &rArr; VL53L0X_GetVcselPulsePeriod &rArr; VL53L0X_get_vcsel_pulse_period &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_measurement_timing_budget_micro_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[2f5]"></a>VL53L0X_GetOffsetCalibrationDataMicroMeter</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vl53l0x_api.o(.text.VL53L0X_GetOffsetCalibrationDataMicroMeter))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_GetOffsetCalibrationDataMicroMeter &rArr; VL53L0X_get_offset_calibration_data_micro_meter &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_offset_calibration_data_micro_meter
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[301]"></a>VL53L0X_GetRangingMeasurementData</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, vl53l0x_api.o(.text.VL53L0X_GetRangingMeasurementData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_range_status
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ReadMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleRangingMeasurement
</UL>

<P><STRONG><a name="[304]"></a>VL53L0X_GetSequenceStepEnables</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, vl53l0x_api.o(.text.VL53L0X_GetSequenceStepEnables))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L0X_GetSequenceStepEnables &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sequence_step_enabled
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_measurement_timing_budget_micro_seconds
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_measurement_timing_budget_micro_seconds
</UL>

<P><STRONG><a name="[306]"></a>VL53L0X_GetVcselPulsePeriod</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vl53l0x_api.o(.text.VL53L0X_GetVcselPulsePeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L0X_GetVcselPulsePeriod &rArr; VL53L0X_get_vcsel_pulse_period &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_vcsel_pulse_period
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
</UL>

<P><STRONG><a name="[2f8]"></a>VL53L0X_GetWrapAroundCheckEnable</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vl53l0x_api.o(.text.VL53L0X_GetWrapAroundCheckEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_GetWrapAroundCheckEnable &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[324]"></a>VL53L0X_GetXTalkCompensationEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vl53l0x_api.o(.text.VL53L0X_GetXTalkCompensationEnable))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_total_xtalk_rate
</UL>

<P><STRONG><a name="[2f4]"></a>VL53L0X_GetXTalkCompensationRateMegaCps</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, vl53l0x_api.o(.text.VL53L0X_GetXTalkCompensationRateMegaCps))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_GetXTalkCompensationRateMegaCps &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[27c]"></a>VL53L0X_PerformRefCalibration</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vl53l0x_api.o(.text.VL53L0X_PerformRefCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = VL53L0X_PerformRefCalibration &rArr; VL53L0X_perform_ref_calibration &rArr; VL53L0X_perform_vhv_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Dev
</UL>

<P><STRONG><a name="[27d]"></a>VL53L0X_PerformRefSpadManagement</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vl53l0x_api.o(.text.VL53L0X_PerformRefSpadManagement))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = VL53L0X_PerformRefSpadManagement &rArr; VL53L0X_perform_ref_spad_management &rArr; perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Dev
</UL>

<P><STRONG><a name="[30a]"></a>VL53L0X_PerformSingleMeasurement</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, vl53l0x_api.o(.text.VL53L0X_PerformSingleMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = VL53L0X_PerformSingleMeasurement &rArr; VL53L0X_StartMeasurement &rArr; VL53L0X_CheckAndLoadInterruptSettings &rArr; VL53L0X_load_tuning_settings &rArr; VL53L0X_WriteMulti &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_measurement_poll_for_completion
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StartMeasurement
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceMode
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleRangingMeasurement
</UL>

<P><STRONG><a name="[252]"></a>VL53L0X_PerformSingleRangingMeasurement</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vl53l0x_api.o(.text.VL53L0X_PerformSingleRangingMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetDeviceMode
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleMeasurement
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetRangingMeasurementData
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_ref_signal_measurement
</UL>

<P><STRONG><a name="[30d]"></a>VL53L0X_PollingDelay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vl53l0x_platform.o(.text.VL53L0X_PollingDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L0X_PollingDelay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_measurement_poll_for_completion
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
</UL>

<P><STRONG><a name="[2f0]"></a>VL53L0X_RdByte</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, vl53l0x_platform.o(.text.VL53L0X_RdByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CRead
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_device_read_strobe
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ref_calibration_io
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_vcsel_pulse_period
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_UpdateByte
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StartMeasurement
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetSequenceStepEnable
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetWrapAroundCheckEnable
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetSequenceStepEnables
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetMeasurementDataReady
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterruptMaskStatus
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetFractionEnable
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ClearInterruptMask
</UL>

<P><STRONG><a name="[2fc]"></a>VL53L0X_RdDWord</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, vl53l0x_platform.o(.text.VL53L0X_RdDWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L0X_RdDWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CRead
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterMeasurementPeriodMilliSeconds
</UL>

<P><STRONG><a name="[2fb]"></a>VL53L0X_RdWord</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, vl53l0x_platform.o(.text.VL53L0X_RdWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CRead
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_ref_signal_measurement
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_range_status
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_offset_calibration_data_micro_meter
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetXTalkCompensationRateMegaCps
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetLimitCheckValue
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterruptThresholds
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterMeasurementPeriodMilliSeconds
</UL>

<P><STRONG><a name="[302]"></a>VL53L0X_ReadMulti</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vl53l0x_platform.o(.text.VL53L0X_ReadMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L0X_ReadMulti &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CRead
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ref_spad_map
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetRangingMeasurementData
</UL>

<P><STRONG><a name="[27e]"></a>VL53L0X_SetDeviceMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, vl53l0x_api.o(.text.VL53L0X_SetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleRangingMeasurement
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Dev
</UL>

<P><STRONG><a name="[310]"></a>VL53L0X_SetGpioConfig</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, vl53l0x_api.o(.text.VL53L0X_SetGpioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VL53L0X_SetGpioConfig &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_UpdateByte
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
</UL>

<P><STRONG><a name="[27f]"></a>VL53L0X_SetLimitCheckEnable</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, vl53l0x_api.o(.text.VL53L0X_SetLimitCheckEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VL53L0X_SetLimitCheckEnable &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrWord
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_UpdateByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Dev
</UL>

<P><STRONG><a name="[280]"></a>VL53L0X_SetLimitCheckValue</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, vl53l0x_api.o(.text.VL53L0X_SetLimitCheckValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L0X_SetLimitCheckValue &rArr; VL53L0X_WrWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrWord
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Dev
</UL>

<P><STRONG><a name="[281]"></a>VL53L0X_SetMeasurementTimingBudgetMicroSeconds</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vl53l0x_api.o(.text.VL53L0X_SetMeasurementTimingBudgetMicroSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = VL53L0X_SetMeasurementTimingBudgetMicroSeconds &rArr; VL53L0X_set_measurement_timing_budget_micro_seconds &rArr; set_sequence_step_timeout &rArr; VL53L0X_GetVcselPulsePeriod &rArr; VL53L0X_get_vcsel_pulse_period &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_measurement_timing_budget_micro_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Dev
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetSequenceStepEnable
</UL>

<P><STRONG><a name="[314]"></a>VL53L0X_SetSequenceStepEnable</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, vl53l0x_api.o(.text.VL53L0X_SetSequenceStepEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = VL53L0X_SetSequenceStepEnable &rArr; VL53L0X_SetMeasurementTimingBudgetMicroSeconds &rArr; VL53L0X_set_measurement_timing_budget_micro_seconds &rArr; set_sequence_step_timeout &rArr; VL53L0X_GetVcselPulsePeriod &rArr; VL53L0X_get_vcsel_pulse_period &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
</UL>

<P><STRONG><a name="[282]"></a>VL53L0X_SetVcselPulsePeriod</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vl53l0x_api.o(.text.VL53L0X_SetVcselPulsePeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = VL53L0X_SetVcselPulsePeriod &rArr; VL53L0X_set_vcsel_pulse_period &rArr; VL53L0X_perform_phase_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Dev
</UL>

<P><STRONG><a name="[30c]"></a>VL53L0X_StartMeasurement</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, vl53l0x_api.o(.text.VL53L0X_StartMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = VL53L0X_StartMeasurement &rArr; VL53L0X_CheckAndLoadInterruptSettings &rArr; VL53L0X_load_tuning_settings &rArr; VL53L0X_WriteMulti &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceMode
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_CheckAndLoadInterruptSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleMeasurement
</UL>

<P><STRONG><a name="[27b]"></a>VL53L0X_StaticInit</STRONG> (Thumb, 468 bytes, Stack size 120 bytes, vl53l0x_api.o(.text.VL53L0X_StaticInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = VL53L0X_StaticInit &rArr; VL53L0X_perform_ref_spad_management &rArr; perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_reference_spads
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_load_tuning_settings
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetSequenceStepEnable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetGpioConfig
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetVcselPulsePeriod
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetFractionEnable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Dev
</UL>

<P><STRONG><a name="[311]"></a>VL53L0X_UpdateByte</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, vl53l0x_platform.o(.text.VL53L0X_UpdateByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_UpdateByte &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckEnable
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ref_calibration_io
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetGpioConfig
</UL>

<P><STRONG><a name="[279]"></a>VL53L0X_WaitDeviceBooted</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vl53l0x_api.o(.text.VL53L0X_WaitDeviceBooted))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Dev
</UL>

<P><STRONG><a name="[2ee]"></a>VL53L0X_WrByte</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, vl53l0x_platform.o(.text.VL53L0X_WrByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL53L0X_WrByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_device_read_strobe
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_ref_signal_measurement
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ref_calibration_io
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_vhv_calibration
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_single_ref_calibration
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_phase_calibration
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_reference_spads
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_calibration
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_range_status
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_UpdateByte
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StartMeasurement
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetSequenceStepEnable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetGpioConfig
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ClearInterruptMask
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_CheckAndLoadInterruptSettings
</UL>

<P><STRONG><a name="[312]"></a>VL53L0X_WrWord</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, vl53l0x_platform.o(.text.VL53L0X_WrWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL53L0X_WrWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckValue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckEnable
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
</UL>

<P><STRONG><a name="[319]"></a>VL53L0X_WriteMulti</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, vl53l0x_platform.o(.text.VL53L0X_WriteMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VL53L0X_WriteMulti &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_I2CWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ref_spad_map
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_load_tuning_settings
</UL>

<P><STRONG><a name="[31a]"></a>VL53L0X_calc_dmax</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, vl53l0x_api_core.o(.text.VL53L0X_calc_dmax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L0X_calc_dmax
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_isqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_sigma_estimate
</UL>

<P><STRONG><a name="[320]"></a>VL53L0X_calc_macro_period_ps</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vl53l0x_api_core.o(.text.VL53L0X_calc_macro_period_ps))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_timeout_us
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_timeout_mclks
</UL>

<P><STRONG><a name="[31c]"></a>VL53L0X_calc_sigma_estimate</STRONG> (Thumb, 630 bytes, Stack size 88 bytes, vl53l0x_api_core.o(.text.VL53L0X_calc_sigma_estimate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L0X_calc_sigma_estimate &rArr; VL53L0X_get_total_signal_rate &rArr; VL53L0X_get_total_xtalk_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_isqrt
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_total_xtalk_rate
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_timeout_mclks
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_dmax
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_total_signal_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_range_status
</UL>

<P><STRONG><a name="[31f]"></a>VL53L0X_calc_timeout_mclks</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, vl53l0x_api_core.o(.text.VL53L0X_calc_timeout_mclks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L0X_calc_timeout_mclks
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_macro_period_ps
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_sigma_estimate
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
</UL>

<P><STRONG><a name="[321]"></a>VL53L0X_calc_timeout_us</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vl53l0x_api_core.o(.text.VL53L0X_calc_timeout_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L0X_calc_timeout_us
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_macro_period_ps
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
</UL>

<P><STRONG><a name="[335]"></a>VL53L0X_decode_timeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vl53l0x_api_core.o(.text.VL53L0X_decode_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
</UL>

<P><STRONG><a name="[325]"></a>VL53L0X_decode_vcsel_period</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vl53l0x_api_core.o(.text.VL53L0X_decode_vcsel_period))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_vcsel_pulse_period
</UL>

<P><STRONG><a name="[322]"></a>VL53L0X_device_read_strobe</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, vl53l0x_api_core.o(.text.VL53L0X_device_read_strobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_device_read_strobe &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
</UL>

<P><STRONG><a name="[33d]"></a>VL53L0X_encode_timeout</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, vl53l0x_api_core.o(.text.VL53L0X_encode_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
</UL>

<P><STRONG><a name="[331]"></a>VL53L0X_encode_vcsel_period</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vl53l0x_api_core.o(.text.VL53L0X_encode_vcsel_period))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
</UL>

<P><STRONG><a name="[316]"></a>VL53L0X_get_info_from_device</STRONG> (Thumb, 1312 bytes, Stack size 112 bytes, vl53l0x_api_core.o(.text.VL53L0X_get_info_from_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = VL53L0X_get_info_from_device &rArr; VL53L0X_device_read_strobe &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_device_read_strobe
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdDWord
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PollingDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
</UL>

<P><STRONG><a name="[2ff]"></a>VL53L0X_get_measurement_timing_budget_micro_seconds</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, vl53l0x_api_core.o(.text.VL53L0X_get_measurement_timing_budget_micro_seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = VL53L0X_get_measurement_timing_budget_micro_seconds &rArr; get_sequence_step_timeout &rArr; VL53L0X_GetVcselPulsePeriod &rArr; VL53L0X_get_vcsel_pulse_period &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetSequenceStepEnables
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetMeasurementTimingBudgetMicroSeconds
</UL>

<P><STRONG><a name="[300]"></a>VL53L0X_get_offset_calibration_data_micro_meter</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, vl53l0x_api_calibration.o(.text.VL53L0X_get_offset_calibration_data_micro_meter))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L0X_get_offset_calibration_data_micro_meter &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetOffsetCalibrationDataMicroMeter
</UL>

<P><STRONG><a name="[303]"></a>VL53L0X_get_pal_range_status</STRONG> (Thumb, 544 bytes, Stack size 72 bytes, vl53l0x_api_core.o(.text.VL53L0X_get_pal_range_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_sigma_estimate
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetLimitCheckValue
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetLimitCheckEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetRangingMeasurementData
</UL>

<P><STRONG><a name="[31d]"></a>VL53L0X_get_total_signal_rate</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vl53l0x_api_core.o(.text.VL53L0X_get_total_signal_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L0X_get_total_signal_rate &rArr; VL53L0X_get_total_xtalk_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_total_xtalk_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_sigma_estimate
</UL>

<P><STRONG><a name="[31e]"></a>VL53L0X_get_total_xtalk_rate</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vl53l0x_api_core.o(.text.VL53L0X_get_total_xtalk_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L0X_get_total_xtalk_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetXTalkCompensationEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_sigma_estimate
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_total_signal_rate
</UL>

<P><STRONG><a name="[307]"></a>VL53L0X_get_vcsel_pulse_period</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vl53l0x_api_core.o(.text.VL53L0X_get_vcsel_pulse_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_get_vcsel_pulse_period &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_decode_vcsel_period
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetVcselPulsePeriod
</UL>

<P><STRONG><a name="[31b]"></a>VL53L0X_isqrt</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, vl53l0x_api_core.o(.text.VL53L0X_isqrt))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_sigma_estimate
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_dmax
</UL>

<P><STRONG><a name="[2ed]"></a>VL53L0X_load_tuning_settings</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, vl53l0x_api_core.o(.text.VL53L0X_load_tuning_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L0X_load_tuning_settings &rArr; VL53L0X_WriteMulti &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WriteMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_CheckAndLoadInterruptSettings
</UL>

<P><STRONG><a name="[30b]"></a>VL53L0X_measurement_poll_for_completion</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, vl53l0x_api_core.o(.text.VL53L0X_measurement_poll_for_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = VL53L0X_measurement_poll_for_completion &rArr; VL53L0X_GetMeasurementDataReady &rArr; VL53L0X_GetInterruptMaskStatus &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PollingDelay
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetMeasurementDataReady
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_single_ref_calibration
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleMeasurement
</UL>

<P><STRONG><a name="[326]"></a>VL53L0X_perform_phase_calibration</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, vl53l0x_api_calibration.o(.text.VL53L0X_perform_phase_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = VL53L0X_perform_phase_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ref_calibration_io
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_single_ref_calibration
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_calibration
</UL>

<P><STRONG><a name="[308]"></a>VL53L0X_perform_ref_calibration</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, vl53l0x_api_calibration.o(.text.VL53L0X_perform_ref_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = VL53L0X_perform_ref_calibration &rArr; VL53L0X_perform_vhv_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_vhv_calibration
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_phase_calibration
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformRefCalibration
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[309]"></a>VL53L0X_perform_ref_spad_management</STRONG> (Thumb, 760 bytes, Stack size 96 bytes, vl53l0x_api_calibration.o(.text.VL53L0X_perform_ref_spad_management))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = VL53L0X_perform_ref_spad_management &rArr; perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ref_spad_map
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_ref_signal_measurement
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_aperture
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_good_spad
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_spad_bit
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_calibration
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformRefSpadManagement
</UL>

<P><STRONG><a name="[327]"></a>VL53L0X_perform_single_ref_calibration</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, vl53l0x_api_calibration.o(.text.VL53L0X_perform_single_ref_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = VL53L0X_perform_single_ref_calibration &rArr; VL53L0X_measurement_poll_for_completion &rArr; VL53L0X_GetMeasurementDataReady &rArr; VL53L0X_GetInterruptMaskStatus &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_measurement_poll_for_completion
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_vhv_calibration
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_phase_calibration
</UL>

<P><STRONG><a name="[329]"></a>VL53L0X_perform_vhv_calibration</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, vl53l0x_api_calibration.o(.text.VL53L0X_perform_vhv_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = VL53L0X_perform_vhv_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ref_calibration_io
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_single_ref_calibration
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_calibration
</UL>

<P><STRONG><a name="[328]"></a>VL53L0X_ref_calibration_io</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, vl53l0x_api_calibration.o(.text.VL53L0X_ref_calibration_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_UpdateByte
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_vhv_calibration
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_phase_calibration
</UL>

<P><STRONG><a name="[313]"></a>VL53L0X_set_measurement_timing_budget_micro_seconds</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, vl53l0x_api_core.o(.text.VL53L0X_set_measurement_timing_budget_micro_seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = VL53L0X_set_measurement_timing_budget_micro_seconds &rArr; set_sequence_step_timeout &rArr; VL53L0X_GetVcselPulsePeriod &rArr; VL53L0X_get_vcsel_pulse_period &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetSequenceStepEnables
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetMeasurementTimingBudgetMicroSeconds
</UL>

<P><STRONG><a name="[317]"></a>VL53L0X_set_reference_spads</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, vl53l0x_api_calibration.o(.text.VL53L0X_set_reference_spads))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = VL53L0X_set_reference_spads &rArr; enable_ref_spads &rArr; get_ref_spad_map &rArr; VL53L0X_ReadMulti &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_aperture
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
</UL>

<P><STRONG><a name="[315]"></a>VL53L0X_set_vcsel_pulse_period</STRONG> (Thumb, 638 bytes, Stack size 40 bytes, vl53l0x_api_core.o(.text.VL53L0X_set_vcsel_pulse_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = VL53L0X_set_vcsel_pulse_period &rArr; VL53L0X_perform_phase_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_encode_vcsel_period
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_phase_calibration
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetVcselPulsePeriod
</UL>

<P><STRONG><a name="[295]"></a>ZDD_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.ZDD_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[30f]"></a>_I2CRead</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vl53l0x_platform.o(.text._I2CRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _I2CRead &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ReadMulti
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdDWord
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>

<P><STRONG><a name="[30e]"></a>_I2CWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vl53l0x_platform.o(.text._I2CWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WriteMulti
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrWord
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ReadMulti
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdDWord
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>

<P><STRONG><a name="[e5]"></a>aci_gap_configure_whitelist</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, ble_gap_aci.o(.text.aci_gap_configure_whitelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = aci_gap_configure_whitelist &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[e0]"></a>aci_gap_init</STRONG> (Thumb, 140 bytes, Stack size 320 bytes, ble_gap_aci.o(.text.aci_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = aci_gap_init &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[e4]"></a>aci_gap_set_authentication_requirement</STRONG> (Thumb, 120 bytes, Stack size 304 bytes, ble_gap_aci.o(.text.aci_gap_set_authentication_requirement))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = aci_gap_set_authentication_requirement &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[d1]"></a>aci_gap_set_discoverable</STRONG> (Thumb, 158 bytes, Stack size 320 bytes, ble_gap_aci.o(.text.aci_gap_set_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
</UL>

<P><STRONG><a name="[e3]"></a>aci_gap_set_io_capability</STRONG> (Thumb, 74 bytes, Stack size 288 bytes, ble_gap_aci.o(.text.aci_gap_set_io_capability))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = aci_gap_set_io_capability &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[ce]"></a>aci_gap_set_non_discoverable</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, ble_gap_aci.o(.text.aci_gap_set_non_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = aci_gap_set_non_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel
</UL>

<P><STRONG><a name="[d2]"></a>aci_gap_update_adv_data</STRONG> (Thumb, 86 bytes, Stack size 296 bytes, ble_gap_aci.o(.text.aci_gap_update_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = aci_gap_update_adv_data &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
</UL>

<P><STRONG><a name="[25b]"></a>aci_gatt_add_char</STRONG> (Thumb, 220 bytes, Stack size 320 bytes, ble_gatt_aci.o(.text.aci_gatt_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
</UL>

<P><STRONG><a name="[25a]"></a>aci_gatt_add_service</STRONG> (Thumb, 188 bytes, Stack size 320 bytes, ble_gatt_aci.o(.text.aci_gatt_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = aci_gatt_add_service &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
</UL>

<P><STRONG><a name="[df]"></a>aci_gatt_init</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, ble_gatt_aci.o(.text.aci_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = aci_gatt_init &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[e1]"></a>aci_gatt_update_char_value</STRONG> (Thumb, 104 bytes, Stack size 304 bytes, ble_gatt_aci.o(.text.aci_gatt_update_char_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_App_Update_Int16
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_App_Update_Char
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[ca]"></a>aci_hal_set_radio_activity_mask</STRONG> (Thumb, 76 bytes, Stack size 296 bytes, ble_hal_aci.o(.text.aci_hal_set_radio_activity_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = aci_hal_set_radio_activity_mask &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[de]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 80 bytes, Stack size 288 bytes, ble_hal_aci.o(.text.aci_hal_set_tx_power_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = aci_hal_set_tx_power_level &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[dd]"></a>aci_hal_write_config_data</STRONG> (Thumb, 92 bytes, Stack size 296 bytes, ble_hal_aci.o(.text.aci_hal_write_config_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = aci_hal_write_config_data &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[32f]"></a>enable_ref_spads</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, vl53l0x_api_calibration.o(.text.enable_ref_spads))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = enable_ref_spads &rArr; get_ref_spad_map &rArr; VL53L0X_ReadMulti &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ref_spad_map
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_aperture
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ref_spad_map
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_good_spad
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_spad_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_reference_spads
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[32c]"></a>enable_spad_bit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vl53l0x_api_calibration.o(.text.enable_spad_bit))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[32a]"></a>get_next_good_spad</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, vl53l0x_api_calibration.o(.text.get_next_good_spad))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_next_good_spad
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[334]"></a>get_ref_spad_map</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vl53l0x_api_calibration.o(.text.get_ref_spad_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_ref_spad_map &rArr; VL53L0X_ReadMulti &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ReadMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
</UL>

<P><STRONG><a name="[318]"></a>get_sequence_step_timeout</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, vl53l0x_api_core.o(.text.get_sequence_step_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_sequence_step_timeout &rArr; VL53L0X_GetVcselPulsePeriod &rArr; VL53L0X_get_vcsel_pulse_period &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_decode_timeout
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_timeout_us
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetVcselPulsePeriod
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetSequenceStepEnables
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_measurement_timing_budget_micro_seconds
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_measurement_timing_budget_micro_seconds
</UL>

<P><STRONG><a name="[2ad]"></a>hci_cmd_resp_release</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_ble.o(.text.hci_cmd_resp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_cmd_resp_release
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
</UL>

<P><STRONG><a name="[337]"></a>hci_cmd_resp_wait</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_ble.o(.text.hci_cmd_resp_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[e6]"></a>hci_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hci_tl.o(.text.hci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_init &rArr; TlInit
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_register_io_bus
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Tl_Init
</UL>

<P><STRONG><a name="[286]"></a>hci_le_read_phy</STRONG> (Thumb, 116 bytes, Stack size 312 bytes, ble_hci_le.o(.text.hci_le_read_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = hci_le_read_phy &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[e2]"></a>hci_le_set_default_phy</STRONG> (Thumb, 84 bytes, Stack size 288 bytes, ble_hci_le.o(.text.hci_le_set_default_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = hci_le_set_default_phy &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[2ae]"></a>hci_notify_asynch_evt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_ble.o(.text.hci_notify_asynch_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_notify_asynch_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
</UL>

<P><STRONG><a name="[338]"></a>hci_register_io_bus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hci_tl_if.o(.text.hci_register_io_bus))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[dc]"></a>hci_reset</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ble_hci_le.o(.text.hci_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hci_reset &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[332]"></a>hci_send_req</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, hci_tl.o(.text.hci_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_wait
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotifyCmdStatus
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_phy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_whitelist
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[63]"></a>hci_user_evt_proc</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hci_tl.o(.text.hci_user_evt_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hci_user_evt_proc &rArr; TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_head
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[32b]"></a>is_aperture</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, vl53l0x_api_calibration.o(.text.is_aperture))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_reference_spads
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[97]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_Device_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Process
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPTIM1_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IPCC_Init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[32e]"></a>perform_ref_signal_measurement</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, vl53l0x_api_calibration.o(.text.perform_ref_signal_measurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleRangingMeasurement
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[305]"></a>sequence_step_enabled</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, vl53l0x_api.o(.text.sequence_step_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetSequenceStepEnables
</UL>

<P><STRONG><a name="[32d]"></a>set_ref_spad_map</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vl53l0x_api_calibration.o(.text.set_ref_spad_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_ref_spad_map &rArr; VL53L0X_WriteMulti &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WriteMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[330]"></a>set_sequence_step_timeout</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, vl53l0x_api_core.o(.text.set_sequence_step_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_sequence_step_timeout &rArr; VL53L0X_GetVcselPulsePeriod &rArr; VL53L0X_get_vcsel_pulse_period &rArr; VL53L0X_RdByte &rArr; _I2CWrite &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_encode_timeout
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_decode_timeout
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_timeout_mclks
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrWord
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetVcselPulsePeriod
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetSequenceStepEnables
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_measurement_timing_budget_micro_seconds
</UL>

<P><STRONG><a name="[2ac]"></a>shci_cmd_resp_release</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_entry.o(.text.shci_cmd_resp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shci_cmd_resp_release
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlCmdEvtReceived
</UL>

<P><STRONG><a name="[33e]"></a>shci_cmd_resp_wait</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_entry.o(.text.shci_cmd_resp_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>

<P><STRONG><a name="[333]"></a>shci_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, shci_tl.o(.text.shci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shci_init &rArr; TlInit &rArr; Cmd_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_register_io_bus
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlInit
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appe_Tl_Init
</UL>

<P><STRONG><a name="[2b2]"></a>shci_notify_asynch_evt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_entry.o(.text.shci_notify_asynch_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shci_notify_asynch_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlUserEvtReceived
</UL>

<P><STRONG><a name="[33f]"></a>shci_register_io_bus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, shci_tl_if.o(.text.shci_register_io_bus))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
</UL>

<P><STRONG><a name="[283]"></a>shci_send</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, shci_tl.o(.text.shci_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_wait
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_SetStatus
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_BLE_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_DEBUG_Init
</UL>

<P><STRONG><a name="[77]"></a>shci_user_evt_proc</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, shci_tl.o(.text.shci_user_evt_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shci_user_evt_proc &rArr; TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_head
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.appe_Tl_Init)
</UL>
<P><STRONG><a name="[aa]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[341]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[340]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[342]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[343]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[ab]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ac]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[344]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[af]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[a2]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[91]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[8d]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[37c]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[37d]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[88]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[23c]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, main.o(.text.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[23e]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, main.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[2a3]"></a>LL_RCC_LSE_SetDriveCapability</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_LSE_SetDriveCapability))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[232]"></a>MX_ADC1_Init</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, main.o(.text.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23b]"></a>MX_DMA_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23d]"></a>MX_GPIO_Init</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, main.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[240]"></a>MX_I2C1_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(.text.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[243]"></a>MX_IPCC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text.MX_IPCC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MX_IPCC_Init &rArr; HAL_IPCC_Init &rArr; HAL_IPCC_MspInit &rArr; LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[244]"></a>MX_LPTIM1_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(.text.MX_LPTIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_LPTIM1_Init &rArr; HAL_LPTIM_Init &rArr; HAL_LPTIM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[245]"></a>MX_RTC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[246]"></a>MX_TIM1_Init</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, main.o(.text.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[248]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>APPE_SysStatusNot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(.text.APPE_SysStatusNot))
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.appe_Tl_Init)
</UL>
<P><STRONG><a name="[79]"></a>APPE_SysUserEvtRx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_entry.o(.text.APPE_SysUserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = APPE_SysUserEvtRx &rArr; APP_BLE_Init &rArr; SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; P2PS_STM_Init &rArr; aci_gatt_add_service &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.appe_Tl_Init)
</UL>
<P><STRONG><a name="[ea]"></a>Config_HSE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_entry.o(.text.Config_HSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Config_HSE
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_SetCapacitorTuning
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
</UL>

<P><STRONG><a name="[227]"></a>Init_Rtc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_entry.o(.text.Init_Rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Rtc
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WAKEUP_SetClock
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableWriteProtection
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableWriteProtection
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[271]"></a>LL_AHB3_GRP1_EnableClock</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, app_entry.o(.text.LL_AHB3_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IPCC
</UL>

<P><STRONG><a name="[272]"></a>LL_C1_IPCC_ClearFlag_CHx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_entry.o(.text.LL_C1_IPCC_ClearFlag_CHx))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IPCC
</UL>

<P><STRONG><a name="[276]"></a>LL_C1_IPCC_DisableReceiveChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_entry.o(.text.LL_C1_IPCC_DisableReceiveChannel))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IPCC
</UL>

<P><STRONG><a name="[274]"></a>LL_C1_IPCC_DisableTransmitChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_entry.o(.text.LL_C1_IPCC_DisableTransmitChannel))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IPCC
</UL>

<P><STRONG><a name="[273]"></a>LL_C2_IPCC_ClearFlag_CHx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_entry.o(.text.LL_C2_IPCC_ClearFlag_CHx))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IPCC
</UL>

<P><STRONG><a name="[277]"></a>LL_C2_IPCC_DisableReceiveChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_entry.o(.text.LL_C2_IPCC_DisableReceiveChannel))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IPCC
</UL>

<P><STRONG><a name="[275]"></a>LL_C2_IPCC_DisableTransmitChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_entry.o(.text.LL_C2_IPCC_DisableTransmitChannel))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IPCC
</UL>

<P><STRONG><a name="[2a6]"></a>LL_C2_PWR_SetPowerMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_entry.o(.text.LL_C2_PWR_SetPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPower_Config
</UL>

<P><STRONG><a name="[225]"></a>LL_EXTI_DisableIT_0_31</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_entry.o(.text.LL_EXTI_DisableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Exti
</UL>

<P><STRONG><a name="[226]"></a>LL_EXTI_DisableIT_32_63</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_entry.o(.text.LL_EXTI_DisableIT_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Exti
</UL>

<P><STRONG><a name="[11d]"></a>LL_LPM_EnableSleep</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_entry.o(.text.LL_LPM_EnableSleep))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[26e]"></a>LL_RCC_ForceBackupDomainReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_entry.o(.text.LL_RCC_ForceBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_BackupDomain
</UL>

<P><STRONG><a name="[eb]"></a>LL_RCC_HSE_SetCapacitorTuning</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_entry.o(.text.LL_RCC_HSE_SetCapacitorTuning))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_HSE
</UL>

<P><STRONG><a name="[26c]"></a>LL_RCC_IsActiveFlag_PINRST</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_entry.o(.text.LL_RCC_IsActiveFlag_PINRST))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_BackupDomain
</UL>

<P><STRONG><a name="[26d]"></a>LL_RCC_IsActiveFlag_SFTRST</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_entry.o(.text.LL_RCC_IsActiveFlag_SFTRST))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_BackupDomain
</UL>

<P><STRONG><a name="[26f]"></a>LL_RCC_ReleaseBackupDomainReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_entry.o(.text.LL_RCC_ReleaseBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_BackupDomain
</UL>

<P><STRONG><a name="[2a4]"></a>LL_RCC_SetClkAfterWakeFromStop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_entry.o(.text.LL_RCC_SetClkAfterWakeFromStop))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPower_Config
</UL>

<P><STRONG><a name="[228]"></a>LL_RTC_DisableWriteProtection</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_entry.o(.text.LL_RTC_DisableWriteProtection))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rtc
</UL>

<P><STRONG><a name="[22a]"></a>LL_RTC_EnableWriteProtection</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_entry.o(.text.LL_RTC_EnableWriteProtection))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rtc
</UL>

<P><STRONG><a name="[229]"></a>LL_RTC_WAKEUP_SetClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_entry.o(.text.LL_RTC_WAKEUP_SetClock))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rtc
</UL>

<P><STRONG><a name="[26b]"></a>Reset_BackupDomain</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_entry.o(.text.Reset_BackupDomain))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Reset_BackupDomain
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ReleaseBackupDomainReset
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_SFTRST
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_PINRST
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ForceBackupDomainReset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Device
</UL>

<P><STRONG><a name="[234]"></a>Reset_Device</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_entry.o(.text.Reset_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Reset_Device &rArr; Reset_IPCC &rArr; LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IPCC
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_BackupDomain
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
</UL>

<P><STRONG><a name="[270]"></a>Reset_IPCC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_entry.o(.text.Reset_IPCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Reset_IPCC &rArr; LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C2_IPCC_DisableTransmitChannel
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C2_IPCC_DisableReceiveChannel
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C2_IPCC_ClearFlag_CHx
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_DisableTransmitChannel
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_DisableReceiveChannel
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_ClearFlag_CHx
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Device
</UL>

<P><STRONG><a name="[237]"></a>SystemPower_Config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_entry.o(.text.SystemPower_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemPower_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetClkAfterWakeFromStop
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C2_PWR_SetPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[236]"></a>System_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_entry.o(.text.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = System_Init &rArr; Init_Exti
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Exti
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rtc
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[238]"></a>appe_Tl_Init</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, app_entry.o(.text.appe_Tl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = appe_Tl_Init &rArr; shci_init &rArr; TlInit &rArr; Cmd_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_Init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[21c]"></a>LL_EXTI_EnableIT_0_31</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_timerserver.o(.text.LL_EXTI_EnableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
</UL>

<P><STRONG><a name="[21b]"></a>LL_EXTI_EnableRisingTrig_0_31</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_timerserver.o(.text.LL_EXTI_EnableRisingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
</UL>

<P><STRONG><a name="[33c]"></a>LinkTimerAfter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hw_timerserver.o(.text.LinkTimerAfter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LinkTimerAfter
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTimer
</UL>

<P><STRONG><a name="[33b]"></a>LinkTimerBefore</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, hw_timerserver.o(.text.LinkTimerBefore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LinkTimerBefore
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTimer
</UL>

<P><STRONG><a name="[278]"></a>ReadRtcSsrValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hw_timerserver.o(.text.ReadRtcSsrValue))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnTimeElapsed
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
</UL>

<P><STRONG><a name="[21f]"></a>RescheduleTimerList</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, hw_timerserver.o(.text.RescheduleTimerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RescheduleTimerList &rArr; RestartWakeupCounter &rArr; HAL_NVIC_SetPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnTimeElapsed
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[26a]"></a>RestartWakeupCounter</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, hw_timerserver.o(.text.RestartWakeupCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RestartWakeupCounter &rArr; HAL_NVIC_SetPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRtcSsrValue
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>

<P><STRONG><a name="[269]"></a>ReturnTimeElapsed</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hw_timerserver.o(.text.ReturnTimeElapsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReturnTimeElapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRtcSsrValue
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTimer
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>

<P><STRONG><a name="[21e]"></a>UnlinkTimer</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, hw_timerserver.o(.text.UnlinkTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UnlinkTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[221]"></a>linkTimer</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, hw_timerserver.o(.text.linkTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = linkTimer &rArr; ReturnTimeElapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnTimeElapsed
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkTimerBefore
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkTimerAfter
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
</UL>

<P><STRONG><a name="[ed]"></a>EnterLowPower</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.EnterLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EnterLowPower &rArr; Switch_On_HSI
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_On_HSI
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_IsActiveFlag_C2SB
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_IsActiveFlag_C2DS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_HSEM_ReleaseLock
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_HSEM_1StepLock
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStopMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterOffMode
</UL>

<P><STRONG><a name="[f3]"></a>ExitLowPower</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.ExitLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExitLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_HSEM_ReleaseLock
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_HSEM_1StepLock
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ExitStopMode
</UL>

<P><STRONG><a name="[ee]"></a>LL_HSEM_1StepLock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.LL_HSEM_1StepLock))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitLowPower
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterLowPower
</UL>

<P><STRONG><a name="[f1]"></a>LL_HSEM_ReleaseLock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.LL_HSEM_ReleaseLock))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitLowPower
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterLowPower
</UL>

<P><STRONG><a name="[25f]"></a>LL_LPM_EnableDeepSleep</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.LL_LPM_EnableDeepSleep))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStopMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterOffMode
</UL>

<P><STRONG><a name="[260]"></a>LL_LPM_EnableSleep</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.LL_LPM_EnableSleep))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSleepMode
</UL>

<P><STRONG><a name="[25d]"></a>LL_PWR_ClearFlag_WU</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.LL_PWR_ClearFlag_WU))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterOffMode
</UL>

<P><STRONG><a name="[ef]"></a>LL_PWR_IsActiveFlag_C2DS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.LL_PWR_IsActiveFlag_C2DS))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterLowPower
</UL>

<P><STRONG><a name="[f0]"></a>LL_PWR_IsActiveFlag_C2SB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.LL_PWR_IsActiveFlag_C2SB))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterLowPower
</UL>

<P><STRONG><a name="[25e]"></a>LL_PWR_SetPowerMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.LL_PWR_SetPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStopMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterOffMode
</UL>

<P><STRONG><a name="[f4]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_On_HSI
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitLowPower
</UL>

<P><STRONG><a name="[29c]"></a>LL_RCC_HSI_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.LL_RCC_HSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_On_HSI
</UL>

<P><STRONG><a name="[29d]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_On_HSI
</UL>

<P><STRONG><a name="[29f]"></a>LL_RCC_SetSMPSClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.LL_RCC_SetSMPSClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_On_HSI
</UL>

<P><STRONG><a name="[29e]"></a>LL_RCC_SetSysClkSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.LL_RCC_SetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_On_HSI
</UL>

<P><STRONG><a name="[f2]"></a>Switch_On_HSI</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.Switch_On_HSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Switch_On_HSI
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSysClkSource
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSMPSClockSource
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_Enable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterLowPower
</UL>

<P><STRONG><a name="[110]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32wbxx_hal_msp.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[12e]"></a>LL_AHB3_GRP1_EnableClock</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32wbxx_hal_msp.o(.text.LL_AHB3_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_MspInit
</UL>

<P><STRONG><a name="[129]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32wbxx_hal_msp.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[1dc]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32wbxx_hal_msp.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[1d7]"></a>LL_RCC_EnableRTC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_msp.o(.text.LL_RCC_EnableRTC))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[64]"></a>Adv_Cancel</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_ble.o(.text.Adv_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Adv_Cancel &rArr; aci_gap_set_non_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[65]"></a>Adv_Cancel_Req</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_ble.o(.text.Adv_Cancel_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adv_Cancel_Req
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[cd]"></a>Adv_Request</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, app_ble.o(.text.Adv_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[67]"></a>BLE_StatusNot</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_ble.o(.text.BLE_StatusNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_StatusNot
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_ResumeTask
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PauseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.Ble_Tl_Init)
</UL>
<P><STRONG><a name="[68]"></a>BLE_UserEvtRx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_ble.o(.text.BLE_UserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = BLE_UserEvtRx &rArr; SVCCTL_UserEvtRx &rArr; SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_UserEvtRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.Ble_Tl_Init)
</UL>
<P><STRONG><a name="[d7]"></a>BleGetBdAddress</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, app_ble.o(.text.BleGetBdAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BleGetBdAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_GetUDN
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_GetSTCompanyID
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_GetDeviceID
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[c8]"></a>Ble_Hci_Gap_Gatt_Init</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, app_ble.o(.text.Ble_Hci_Gap_Gatt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Ble_Hci_Gap_Gatt_Init &rArr; aci_gap_init &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_whitelist
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleGetBdAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[c4]"></a>Ble_Tl_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_ble.o(.text.Ble_Tl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ble_Tl_Init &rArr; hci_init &rArr; TlInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[da]"></a>LL_FLASH_GetDeviceID</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_ble.o(.text.LL_FLASH_GetDeviceID))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleGetBdAddress
</UL>

<P><STRONG><a name="[d9]"></a>LL_FLASH_GetSTCompanyID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_ble.o(.text.LL_FLASH_GetSTCompanyID))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleGetBdAddress
</UL>

<P><STRONG><a name="[d8]"></a>LL_FLASH_GetUDN</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_ble.o(.text.LL_FLASH_GetUDN))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleGetBdAddress
</UL>

<P><STRONG><a name="[66]"></a>Switch_OFF_GPIO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ble.o(.text.Switch_OFF_GPIO))
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[1f4]"></a>HW_IPCC_BLE_AclDataEvtHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_BLE_AclDataEvtHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_IPCC_BLE_AclDataEvtHandler &rArr; HW_IPCC_BLE_AclDataAckNot
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_DisableTransmitChannel
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_AclDataAckNot
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>

<P><STRONG><a name="[1f7]"></a>HW_IPCC_BLE_EvtHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_BLE_EvtHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_IPCC_BLE_EvtHandler &rArr; HW_IPCC_BLE_RxEvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_ClearFlag_CHx
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[209]"></a>HW_IPCC_MM_FreeBufHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_MM_FreeBufHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_MM_FreeBufHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_SetFlag_CHx
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_DisableTransmitChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>

<P><STRONG><a name="[211]"></a>HW_IPCC_SYS_CmdEvtHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_SYS_CmdEvtHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_IPCC_SYS_CmdEvtHandler &rArr; HW_IPCC_SYS_CmdEvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_DisableTransmitChannel
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_CmdEvtNot
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>

<P><STRONG><a name="[20f]"></a>HW_IPCC_SYS_EvtHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_SYS_EvtHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_IPCC_SYS_EvtHandler &rArr; HW_IPCC_SYS_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_ClearFlag_CHx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[210]"></a>HW_IPCC_TRACES_EvtHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_TRACES_EvtHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_IPCC_TRACES_EvtHandler &rArr; HW_IPCC_TRACES_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_ClearFlag_CHx
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[206]"></a>LL_AHB3_GRP1_EnableClock</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, hw_ipcc.o(.text.LL_AHB3_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Init
</UL>

<P><STRONG><a name="[1f9]"></a>LL_C1_IPCC_ClearFlag_CHx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_ipcc.o(.text.LL_C1_IPCC_ClearFlag_CHx))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtHandler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_EvtHandler
</UL>

<P><STRONG><a name="[1f5]"></a>LL_C1_IPCC_DisableTransmitChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(.text.LL_C1_IPCC_DisableTransmitChannel))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_CmdEvtHandler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_FreeBufHandler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_AclDataEvtHandler
</UL>

<P><STRONG><a name="[207]"></a>LL_C1_IPCC_EnableIT_RXO</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(.text.LL_C1_IPCC_EnableIT_RXO))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Init
</UL>

<P><STRONG><a name="[208]"></a>LL_C1_IPCC_EnableIT_TXF</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(.text.LL_C1_IPCC_EnableIT_TXF))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Init
</UL>

<P><STRONG><a name="[1fb]"></a>LL_C1_IPCC_EnableReceiveChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(.text.LL_C1_IPCC_EnableReceiveChannel))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_Init
</UL>

<P><STRONG><a name="[20c]"></a>LL_C1_IPCC_EnableTransmitChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(.text.LL_C1_IPCC_EnableTransmitChannel))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_SendCmd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_SendFreeBuf
</UL>

<P><STRONG><a name="[20b]"></a>LL_C1_IPCC_IsActiveFlag_CHx</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hw_ipcc.o(.text.LL_C1_IPCC_IsActiveFlag_CHx))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_SendFreeBuf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>

<P><STRONG><a name="[1ff]"></a>LL_C1_IPCC_SetFlag_CHx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_ipcc.o(.text.LL_C1_IPCC_SetFlag_CHx))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_SendCmd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_SendFreeBuf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_SendCmd
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_FreeBufHandler
</UL>

<P><STRONG><a name="[201]"></a>LL_C2_AHB3_GRP1_EnableClock</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hw_ipcc.o(.text.LL_C2_AHB3_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_C2_AHB3_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Enable
</UL>

<P><STRONG><a name="[202]"></a>LL_C2_EXTI_EnableEvent_32_63</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(.text.LL_C2_EXTI_EnableEvent_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Enable
</UL>

<P><STRONG><a name="[20e]"></a>LL_C2_IPCC_IsActiveFlag_CHx</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hw_ipcc.o(.text.LL_C2_IPCC_IsActiveFlag_CHx))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[203]"></a>LL_EXTI_EnableRisingTrig_32_63</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(.text.LL_EXTI_EnableRisingTrig_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Enable
</UL>

<P><STRONG><a name="[204]"></a>LL_PWR_EnableBootC2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(.text.LL_PWR_EnableBootC2))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Enable
</UL>

<P><STRONG><a name="[15a]"></a>HAL_PCD_EP_DB_Receive</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_EP_DB_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_DB_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPMA
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[15c]"></a>HAL_PCD_EP_DB_Transmit</STRONG> (Thumb, 798 bytes, Stack size 24 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_EP_DB_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_PCD_EP_DB_Transmit &rArr; HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePMA
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler
</UL>

<P><STRONG><a name="[167]"></a>PCD_EP_ISR_Handler</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32wbxx_hal_pcd.o(.text.PCD_EP_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PCD_EP_ISR_Handler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPMA
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_DB_Transmit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_DB_Receive
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[19c]"></a>LL_C2_RCC_SetAHBPrescaler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_C2_RCC_SetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[267]"></a>LL_RCC_GetAHB4Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_GetAHB4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[1ac]"></a>LL_RCC_GetAHBPrescaler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_GetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[1ae]"></a>LL_RCC_GetAPB1Prescaler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_GetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[1b0]"></a>LL_RCC_GetAPB2Prescaler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_GetAPB2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[1a8]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[1c0]"></a>LL_RCC_HSE_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_HSE_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1bd]"></a>LL_RCC_HSE_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_HSE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1b2]"></a>LL_RCC_HSE_IsEnabledDiv2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_HSE_IsEnabledDiv2))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[1a5]"></a>LL_RCC_HSE_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_HSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1ce]"></a>LL_RCC_HSI48_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_HSI48_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1cb]"></a>LL_RCC_HSI48_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_HSI48_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1cc]"></a>LL_RCC_HSI48_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_HSI48_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1c1]"></a>LL_RCC_HSI_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_HSI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1be]"></a>LL_RCC_HSI_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_HSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1aa]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1bf]"></a>LL_RCC_HSI_SetCalibTrimming</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_HSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[19d]"></a>LL_RCC_IsActiveFlag_C2HPRE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_IsActiveFlag_C2HPRE))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[19b]"></a>LL_RCC_IsActiveFlag_HPRE</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_IsActiveFlag_HPRE))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1a1]"></a>LL_RCC_IsActiveFlag_PPRE1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_IsActiveFlag_PPRE1))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1a3]"></a>LL_RCC_IsActiveFlag_PPRE2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_IsActiveFlag_PPRE2))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[19f]"></a>LL_RCC_IsActiveFlag_SHDHPRE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_IsActiveFlag_SHDHPRE))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1d0]"></a>LL_RCC_LSE_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_LSE_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1d1]"></a>LL_RCC_LSE_DisableBypass</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_LSE_DisableBypass))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1ca]"></a>LL_RCC_LSE_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_LSE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1cf]"></a>LL_RCC_LSE_EnableBypass</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_LSE_EnableBypass))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1d2]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1c7]"></a>LL_RCC_LSI1_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_LSI1_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1c2]"></a>LL_RCC_LSI1_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_LSI1_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1c3]"></a>LL_RCC_LSI1_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_LSI1_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1c4]"></a>LL_RCC_LSI2_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_LSI2_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1c6]"></a>LL_RCC_LSI2_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_LSI2_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1c5]"></a>LL_RCC_LSI2_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_LSI2_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1c8]"></a>LL_RCC_LSI2_SetTrimming</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_LSI2_SetTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1bc]"></a>LL_RCC_MSI_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_MSI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1b8]"></a>LL_RCC_MSI_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_MSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1b1]"></a>LL_RCC_MSI_GetRange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_MSI_GetRange))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[1a6]"></a>LL_RCC_MSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_MSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1bb]"></a>LL_RCC_MSI_SetCalibTrimming</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_MSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1ba]"></a>LL_RCC_MSI_SetRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_MSI_SetRange))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1cd]"></a>LL_RCC_PLL_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_PLL_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1c9]"></a>LL_RCC_PLL_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_PLL_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1b5]"></a>LL_RCC_PLL_GetDivider</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_PLL_GetDivider))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[1b3]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[1b4]"></a>LL_RCC_PLL_GetN</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_PLL_GetN))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[1b6]"></a>LL_RCC_PLL_GetR</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_PLL_GetR))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[1a9]"></a>LL_RCC_PLL_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_PLL_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[19e]"></a>LL_RCC_SetAHB4Prescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_SetAHB4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[19a]"></a>LL_RCC_SetAHBPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_SetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1a0]"></a>LL_RCC_SetAPB1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_SetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1a2]"></a>LL_RCC_SetAPB2Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_SetAPB2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1a7]"></a>LL_RCC_SetSysClkSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.LL_RCC_SetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[266]"></a>RCC_SetFlashLatency</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32wbxx_hal_rcc.o(.text.RCC_SetFlashLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[1b9]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32wbxx_hal_rcc.o(.text.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHB4Prescaler
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[186]"></a>LL_RCC_ForceBackupDomainReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_ForceBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[184]"></a>LL_RCC_GetRTCClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_GetRTCClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[188]"></a>LL_RCC_LSE_IsEnabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_LSE_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[189]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[181]"></a>LL_RCC_MSI_EnablePLLMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_MSI_EnablePLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
</UL>

<P><STRONG><a name="[263]"></a>LL_RCC_PLLSAI1_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_PLLSAI1_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[265]"></a>LL_RCC_PLLSAI1_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_PLLSAI1_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[264]"></a>LL_RCC_PLLSAI1_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_PLLSAI1_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[187]"></a>LL_RCC_ReleaseBackupDomainReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_ReleaseBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[193]"></a>LL_RCC_SetADCClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_SetADCClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[194]"></a>LL_RCC_SetCLK48ClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_SetCLK48ClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetUSBClockSource
</UL>

<P><STRONG><a name="[18f]"></a>LL_RCC_SetI2CClockSource</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_SetI2CClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[18e]"></a>LL_RCC_SetLPTIMClockSource</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_SetLPTIMClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[18d]"></a>LL_RCC_SetLPUARTClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_SetLPUARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[196]"></a>LL_RCC_SetRFWKPClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_SetRFWKPClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[192]"></a>LL_RCC_SetRNGClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_SetRNGClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[18b]"></a>LL_RCC_SetRTCClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_SetRTCClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[183]"></a>LL_RCC_SetSAIClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_SetSAIClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[198]"></a>LL_RCC_SetSMPSClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_SetSMPSClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[197]"></a>LL_RCC_SetSMPSPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_SetSMPSPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[18c]"></a>LL_RCC_SetUSARTClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_SetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[190]"></a>LL_RCC_SetUSBClockSource</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc_ex.o(.text.LL_RCC_SetUSBClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetUSBClockSource
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetCLK48ClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[18a]"></a>RCCEx_PLLSAI1_ConfigNP</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(.text.RCCEx_PLLSAI1_ConfigNP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNP
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[191]"></a>RCCEx_PLLSAI1_ConfigNQ</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(.text.RCCEx_PLLSAI1_ConfigNQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNQ
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[195]"></a>RCCEx_PLLSAI1_ConfigNR</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(.text.RCCEx_PLLSAI1_ConfigNR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[118]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32wbxx_hal_dma.o(.text.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[119]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32wbxx_hal_dma.o(.text.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[11a]"></a>DMA_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32wbxx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[14b]"></a>NVIC_EncodePriority</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1d8]"></a>SysTick_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32wbxx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[144]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>

<P><STRONG><a name="[146]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[147]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[14a]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[149]"></a>__NVIC_SetPendingIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.__NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
</UL>

<P><STRONG><a name="[14c]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[14d]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[10c]"></a>LL_ADC_DisableDeepPowerDown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_DisableDeepPowerDown))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[bc]"></a>LL_ADC_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[10e]"></a>LL_ADC_EnableInternalRegulator</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_EnableInternalRegulator))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[bd]"></a>LL_ADC_GetCommonPathInternalCh</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_GetCommonPathInternalCh))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[fc]"></a>LL_ADC_GetOffsetChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_GetOffsetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[fa]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[102]"></a>LL_ADC_INJ_IsTriggerSourceSWStart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_INJ_IsTriggerSourceSWStart))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>LL_ADC_IsDeepPowerDownEnabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_IsDeepPowerDownEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[bb]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[10d]"></a>LL_ADC_IsInternalRegulatorEnabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_IsInternalRegulatorEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[107]"></a>LL_ADC_REG_GetDMATransfer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_REG_GetDMATransfer))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[b7]"></a>LL_ADC_REG_IsTriggerSourceSWStart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_REG_IsTriggerSourceSWStart))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[f9]"></a>LL_ADC_REG_SetSequencerRanks</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_REG_SetSequencerRanks))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[117]"></a>LL_ADC_REG_StartConversion</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_REG_StartConversion))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[fb]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[ff]"></a>LL_ADC_SetChannelSingleDiff</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_SetChannelSingleDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetChannelSingleDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[10f]"></a>LL_ADC_SetCommonClock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_SetCommonClock))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[100]"></a>LL_ADC_SetCommonPathInternalCh</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_SetCommonPathInternalCh))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[fe]"></a>LL_ADC_SetOffset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_SetOffset))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[fd]"></a>LL_ADC_SetOffsetState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_adc.o(.text.LL_ADC_SetOffsetState))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[223]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32wbxx_hal_i2c.o(.text.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[222]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32wbxx_hal_i2c.o(.text.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
</UL>

<P><STRONG><a name="[124]"></a>I2C_TransferConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32wbxx_hal_i2c.o(.text.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[123]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, stm32wbxx_hal_i2c.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[125]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32wbxx_hal_i2c.o(.text.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[126]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32wbxx_hal_i2c.o(.text.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[128]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32wbxx_hal_i2c.o(.text.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[22c]"></a>LL_APB1_GRP1_ForceReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.LL_APB1_GRP1_ForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_Disable
</UL>

<P><STRONG><a name="[22d]"></a>LL_APB1_GRP1_ReleaseReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.LL_APB1_GRP1_ReleaseReset))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_Disable
</UL>

<P><STRONG><a name="[22e]"></a>LL_APB1_GRP2_ForceReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.LL_APB1_GRP2_ForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_Disable
</UL>

<P><STRONG><a name="[22f]"></a>LL_APB1_GRP2_ReleaseReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.LL_APB1_GRP2_ReleaseReset))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_Disable
</UL>

<P><STRONG><a name="[22b]"></a>LL_RCC_GetLPTIMClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.LL_RCC_GetLPTIMClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_Disable
</UL>

<P><STRONG><a name="[230]"></a>LL_RCC_SetLPTIMClockSource</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_lptim.o(.text.LL_RCC_SetLPTIMClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_Disable
</UL>

<P><STRONG><a name="[140]"></a>LPTIM_WaitForFlag</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32wbxx_hal_lptim.o(.text.LPTIM_WaitForFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPTIM_WaitForFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_TimeOut_Start_IT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_Disable
</UL>

<P><STRONG><a name="[1e1]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(.text.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1df]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(.text.TIM_TI1_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1e0]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32wbxx_hal_tim.o(.text.TIM_TI2_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[2ba]"></a>LL_RCC_GetLPUARTClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.LL_RCC_GetLPUARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2b9]"></a>LL_RCC_GetUSARTClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.LL_RCC_GetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[6e]"></a>UART_DMAError</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32wbxx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[6c]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[6d]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[2b5]"></a>UART_EndRxTransfer</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[2b4]"></a>UART_EndTxTransfer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.UART_EndTxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
</UL>

<P><STRONG><a name="[1ec]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32wbxx_hal_uart_ex.o(.text.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[73]"></a>SendFreeBuf</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tl_mbox.o(.text.SendFreeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendFreeBuf &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tl_mbox.o(.text.TL_MM_EvtDone)
</UL>
<P><STRONG><a name="[72]"></a>PeerToPeer_Event_Handler</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, p2p_stm.o(.text.PeerToPeer_Event_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PeerToPeer_Event_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_App_Notification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p2p_stm.o(.text.P2PS_STM_Init)
</UL>
<P><STRONG><a name="[339]"></a>NotifyCmdStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hci_tl.o(.text.NotifyCmdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NotifyCmdStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[29a]"></a>SendCmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hci_tl.o(.text.SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[74]"></a>TlEvtReceived</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hci_tl.o(.text.TlEvtReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TlEvtReceived &rArr; hci_notify_asynch_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_release
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl.o(.text.TlInit)
</UL>
<P><STRONG><a name="[2af]"></a>TlInit</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, hci_tl.o(.text.TlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TlInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[2b1]"></a>Cmd_SetStatus</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, shci_tl.o(.text.Cmd_SetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cmd_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>

<P><STRONG><a name="[75]"></a>TlCmdEvtReceived</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, shci_tl.o(.text.TlCmdEvtReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TlCmdEvtReceived &rArr; shci_cmd_resp_release
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl.o(.text.TlInit)
</UL>
<P><STRONG><a name="[2b0]"></a>TlInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, shci_tl.o(.text.TlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TlInit &rArr; Cmd_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_SetStatus
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
</UL>

<P><STRONG><a name="[76]"></a>TlUserEvtReceived</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, shci_tl.o(.text.TlUserEvtReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TlUserEvtReceived &rArr; shci_notify_asynch_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl.o(.text.TlInit)
</UL>
<P><STRONG><a name="[172]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, usbd_conf.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[173]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, usbd_conf.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[14f]"></a>SystemClockConfig_Resume</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbd_conf.o(.text.SystemClockConfig_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = SystemClockConfig_Resume &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
</UL>

<P><STRONG><a name="[2d3]"></a>USBD_Get_USB_Status</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_conf.o(.text.USBD_Get_USB_Status))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[f5]"></a>Get_SerialNum</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_desc.o(.text.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SerialStrDescriptor
</UL>

<P><STRONG><a name="[f6]"></a>IntToUnicode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_desc.o(.text.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[13]"></a>CDC_Control_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(.text.CDC_Control_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[12]"></a>CDC_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(.text.CDC_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[11]"></a>CDC_Init_FS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_cdc_if.o(.text.CDC_Init_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDC_Init_FS
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[14]"></a>CDC_Receive_FS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_cdc_if.o(.text.CDC_Receive_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CDC_Receive_FS &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[15]"></a>CDC_TransmitCplt_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(.text.CDC_TransmitCplt_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[2dd]"></a>SWAPBYTE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_ctlreq.o(.text.SWAPBYTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>

<P><STRONG><a name="[2c7]"></a>USBD_ClrFeature</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_ctlreq.o(.text.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2cd]"></a>USBD_GetConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_ctlreq.o(.text.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2ce]"></a>USBD_GetDescriptor</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, usbd_ctlreq.o(.text.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2d0]"></a>USBD_GetLen</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbd_ctlreq.o(.text.USBD_GetLen))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[2cf]"></a>USBD_GetStatus</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_ctlreq.o(.text.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2de]"></a>USBD_SetAddress</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_ctlreq.o(.text.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2df]"></a>USBD_SetConfig</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, usbd_ctlreq.o(.text.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2e2]"></a>USBD_SetFeature</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ctlreq.o(.text.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[b]"></a>USBD_CDC_DataIn</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usbd_cdc.o(.text.USBD_CDC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CDC_DataIn &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[c]"></a>USBD_CDC_DataOut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_cdc.o(.text.USBD_CDC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CDC_DataOut &rArr; USBD_LL_GetRxDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[8]"></a>USBD_CDC_DeInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbd_cdc.o(.text.USBD_CDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CDC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_free
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[a]"></a>USBD_CDC_EP0_RxReady</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_cdc.o(.text.USBD_CDC_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[e]"></a>USBD_CDC_GetFSCfgDesc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc.o(.text.USBD_CDC_GetFSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[d]"></a>USBD_CDC_GetHSCfgDesc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc.o(.text.USBD_CDC_GetHSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[f]"></a>USBD_CDC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc.o(.text.USBD_CDC_GetOtherSpeedCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[7]"></a>USBD_CDC_Init</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, usbd_cdc.o(.text.USBD_CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_malloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[9]"></a>USBD_CDC_Setup</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, usbd_cdc.o(.text.USBD_CDC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CDC_Setup &rArr; USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[a8]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[62]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
